<feed xmlns="http://www.w3.org/2005/Atom">
  <title>David Darnes</title>
  <subtitle>Designer, Front-end Developer &amp; Writer</subtitle>
  <link href="https://darn.es/rss/" rel="self">
  <link href="https://darn.es">
  <updated>2021-09-15T08:27:49.000+00:00</updated>
  <id>https://darn.es</id>
  <author>
    <name>David Darnes</name>
    <email>me@daviddarnes.com</email>
  </author>
  <entry>
    <title>My home desk setup</title>
    <link>https://darn.es/uses/
    <updated>2021-09-08T14:27:51.000+00:00</updated>
    <id>https://darn.es/uses/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://setups.co/posts/david-darnes">My home desk setup</a></p>
        <pre>https://setups.co/posts/david-darnes</pre>

    </content>
  </entry>
  <entry>
    <title>How to use Schema.org Markup for Your E-Commerce Sites</title>
    <link>https://darn.es/how-to-use-schema-org-markup-for-your-e-commerce-sites/
    <updated>2021-09-08T14:26:49.000+00:00</updated>
    <id>https://darn.es/how-to-use-schema-org-markup-for-your-e-commerce-sites/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://snipcart.com/blog/schema-markup-ecommerce-website-seo">How to use Schema.org Markup for Your E-Commerce Sites</a></p>
        <pre>https://snipcart.com/blog/schema-markup-ecommerce-website-seo</pre>

    </content>
  </entry>
  <entry>
    <title>Add a Formspree Form to Your Static Sites</title>
    <link>https://darn.es/add-a-formspree-form-to-your-static-sites-2/
    <updated>2021-09-08T14:25:13.000+00:00</updated>
    <id>https://darn.es/add-a-formspree-form-to-your-static-sites-2/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://webdesign.tutsplus.com/tutorials/quick-tip-add-a-formspree-form-to-your-static-sites--cms-23870">Add a Formspree Form to Your Static Sites</a></p>
        <pre>https://webdesign.tutsplus.com/tutorials/quick-tip-add-a-formspree-form-to-your-static-sites--cms-23870</pre>

    </content>
  </entry>
  <entry>
    <title>Jekyll alternatives: The benefits to JavaScript static site generators</title>
    <link>https://darn.es/jekyll-alternatives-the-benefits-to-javascript-static-site-generators/
    <updated>2021-09-09T06:13:40.000+00:00</updated>
    <id>https://darn.es/jekyll-alternatives-the-benefits-to-javascript-static-site-generators/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://www.takeshape.io/articles/jekyll-alternatives-the-benefits-to-javascript-static-site-generators/">Jekyll alternatives: The benefits to JavaScript static site generators</a></p>
        <pre>https://www.takeshape.io/articles/jekyll-alternatives-the-benefits-to-javascript-static-site-generators/</pre>

    </content>
  </entry>
  <entry>
    <title>Blogging on the Jamstack with DropInBlog, Netlify &amp; Eleventy</title>
    <link>https://darn.es/blogging-on-the-jamstack-with-dropinblog-netlify-eleventy/
    <updated>2021-09-08T14:23:46.000+00:00</updated>
    <id>https://darn.es/blogging-on-the-jamstack-with-dropinblog-netlify-eleventy/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://dropinblog.com/blog/blogging-on-the-jamstack-with-netlify-and-eleventy/">Blogging on the Jamstack with DropInBlog, Netlify &amp; Eleventy</a></p>
        <pre>https://dropinblog.com/blog/blogging-on-the-jamstack-with-netlify-and-eleventy/</pre>

    </content>
  </entry>
  <entry>
    <title>What is Eleventy?</title>
    <link>https://darn.es/what-is-eleventy/
    <updated>2021-09-08T14:20:31.000+00:00</updated>
    <id>https://darn.es/what-is-eleventy/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://podcast.smashingmagazine.com/episodes/what-is-eleventy-with-david-darnes">What is Eleventy?</a></p>
        <pre>https://podcast.smashingmagazine.com/episodes/what-is-eleventy-with-david-darnes</pre>

    </content>
  </entry>
  <entry>
    <title>Switching to Netlify DNS</title>
    <link>https://darn.es/switching-to-netlify-dns/
    <updated>2021-09-23T07:47:30.000+00:00</updated>
    <id>https://darn.es/switching-to-netlify-dns/</id>
    <content type="html">

        &lt;p&gt;&lt;strong&gt;If you’re onboard with &lt;a href=&quot;https://netlify.com/&quot;&gt;Netlify&lt;/a&gt; then maybe you should switch your custom domains to their platform as well. In this tutorial I’ll show you how to move your custom domain to Netlify DNS and how to link it with a project on Netlify.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Domain management can be a real pain, to me at least anyway. I think it’s down to the fact that I don’t do it very often, and when I am doing it the terminology is slightly misleading or abstracted.&lt;/p&gt;&lt;blockquote&gt;Do I want a &lt;code&gt;CNAME&lt;/code&gt; or a an &lt;code&gt;A&lt;/code&gt; record? What did I do last time??&lt;br /&gt;Dang, I forgot to redirect the &lt;code&gt;www&lt;/code&gt; subdomain to the bare domain…&lt;br /&gt;…how do I do that again???&lt;/blockquote&gt;&lt;p&gt;A few of the questions that go through my brain when sorting out a new domain. If you’re wondering where I buy my domains, I use &lt;a href=&quot;https://gandi.link/f/e20f1f35&quot;&gt;Gandi&lt;/a&gt; and have been for the last 11 years. &lt;strong&gt;Use &lt;a href=&quot;https://gandi.link/f/e20f1f35&quot;&gt;this link to get 20% off a domain&lt;/a&gt; you buy with Gandi.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;To alleviate some of these pain points when managing domains I’ve been switching them over to &lt;a href=&quot;https://docs.netlify.com/domains-https/netlify-dns/&quot;&gt;Netlify DNS&lt;/a&gt;. The following is a write up of how I’ve been switching my domains over, plus any gotchas I encountered along the way.&lt;/p&gt;&lt;h2 id=&quot;prerequisites&quot;&gt;Prerequisites&lt;/h2&gt;&lt;p&gt;The following tutorial assumes you have a custom domain ready to use, along with a project hosted on Netlify ??. You’ll also need to sort out any possible caching issues, this is to ensure domains resolve to their correct state when you load them in a browser.&lt;/p&gt;&lt;p&gt;One of the most common caching problems with domains is the TTL, the “Time To Live”. A TTL is a numerical value representing the duration of time the server assumes a domain record value before checking again. For example, if the TTL on a domain record is &lt;code&gt;10800&lt;/code&gt; then the server will not check this record value again for 10800 seconds or 3 hours for us humans. You can find out the TTL of a domain record by using the &lt;code&gt;dig&lt;/code&gt; command in your CLI tool, type &lt;code&gt;dig yourdomain.com&lt;/code&gt; and hit enter.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2021/09/dig-example.png&quot; class=&quot;kg-image&quot; alt=&quot;Example of the dig command pointing to the TTL (Time To Live) value, which is 20 seconds in this case&quot; loading=&quot;lazy&quot; width=&quot;1068&quot; height=&quot;644&quot; srcset=&quot;https://hub.darn.es/content/images/size/w600/2021/09/dig-example.png 600w, https://hub.darn.es/content/images/size/w1000/2021/09/dig-example.png 1000w, https://hub.darn.es/content/images/2021/09/dig-example.png 1068w&quot; sizes=&quot;(min-width: 720px) 720px&quot; /&gt;&lt;/figure&gt;&lt;p&gt;It’s recommended you reduce this value to as short as possible and waiting for the full original TTL to finish before going through the Netlify DNS transfer process. That way you’ll see the actual results sooner. There’s a &lt;a href=&quot;https://community.netlify.com/t/support-guide-minimal-downtime-for-a-live-site-dns-migration/141&quot;&gt;guide over on the Netlify community forum on how to update your TTL&lt;/a&gt; before switching.&lt;/p&gt;&lt;h2 id=&quot;getting-started&quot;&gt;Getting started&lt;/h2&gt;&lt;p&gt;Head on over to your Netlify dashboard and click on “Domains”. &lt;a href=&quot;https://app.netlify.com/dns&quot;&gt;Here’s direct link to the Domains UI&lt;/a&gt; if you’re feeling lazy.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card kg-width-wide&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2021/09/add-domain-button.png&quot; class=&quot;kg-image&quot; alt=&quot;Domains view in Netlify, focusing on the &amp;quot;Add or register domain button&amp;quot;&quot; loading=&quot;lazy&quot; width=&quot;1068&quot; height=&quot;504&quot; srcset=&quot;https://hub.darn.es/content/images/size/w600/2021/09/add-domain-button.png 600w, https://hub.darn.es/content/images/size/w1000/2021/09/add-domain-button.png 1000w, https://hub.darn.es/content/images/2021/09/add-domain-button.png 1068w&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Click on “Add or register domain” and enter your domain into the “Domain” field. You can also buy a new custom domain from here too, if you’re wanting to keep your stack of services to a minimum.&lt;/p&gt;&lt;p&gt;For people who already own their domain clicking “Verify” will respond with Netlify telling you that the domain already has an owner, which is hopefully you. Click “Yes, add domain”.&lt;/p&gt;&lt;p&gt;&lt;em&gt;There are some TLDs that Netlify can’t sell yet, such as &lt;code&gt;.es&lt;/code&gt;domains. Even if you own the domain Netlify will respond with this message, so if you already own the domain ignore the message.&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;prepare-dns-records&quot;&gt;Prepare DNS records&lt;/h3&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2021/09/add-records.png&quot; class=&quot;kg-image&quot; alt=&quot;Add DNS records view, with &amp;quot;Add records&amp;quot; and &amp;quot;Continue&amp;quot; buttons&quot; loading=&quot;lazy&quot; width=&quot;1068&quot; height=&quot;1040&quot; srcset=&quot;https://hub.darn.es/content/images/size/w600/2021/09/add-records.png 600w, https://hub.darn.es/content/images/size/w1000/2021/09/add-records.png 1000w, https://hub.darn.es/content/images/2021/09/add-records.png 1068w&quot; sizes=&quot;(min-width: 720px) 720px&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Before switching the domain over Netlify gives you the opportunity to add any custom records. If the domain is for an existing live project this will hopefully reduce any downtime during the switch.&lt;/p&gt;&lt;p&gt;Anyone who has used Cloudflare for their DNS may recall that when you add a domain they automatically guess the records by looking at the domain’s existing records. It’s a clever trick, and saves you entering the records yourself. Why doesn’t Netlify do this? I believe this is by design, so they don’t accidentally add records that will be overwritten when you add a project to a domain using their UI.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2021/09/add-record-dialog.png&quot; class=&quot;kg-image&quot; alt=&quot;Add DNS record dialog with record type select, name field, value field and TTL field. All inputs have a label above and a smaller more verbose label underneath&quot; loading=&quot;lazy&quot; width=&quot;1068&quot; height=&quot;975&quot; srcset=&quot;https://hub.darn.es/content/images/size/w600/2021/09/add-record-dialog.png 600w, https://hub.darn.es/content/images/size/w1000/2021/09/add-record-dialog.png 1000w, https://hub.darn.es/content/images/2021/09/add-record-dialog.png 1068w&quot; sizes=&quot;(min-width: 720px) 720px&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Use the DNS records interface to add your domain records. I very much appreciate the additional labels added to the fields here, helps me jog my memory on what needs to be entered. You may only be using the custom domain for a project, in which case you can skip this step.&lt;/p&gt;&lt;h3 id=&quot;add-nameservers&quot;&gt;Add nameservers&lt;/h3&gt;&lt;p&gt;The final step of adding your custom domain is adding the nameservers to your domain provider. Nameservers provide the server IP when a domain is requested, essentially the place where all your domain records are kept. Netlify will give you a set of nameservers that look like this:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;dns1.p05.nsone.net
dns2.p05.nsone.net
dns3.p05.nsone.net
dns4.p05.nsone.net
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;You’ll need to take these and add them within the admin of your domain with your domain provider. Gandi has a guide &lt;a href=&quot;https://docs.gandi.net/en/domain_names/common_operations/changing_nameservers.html#switching-to-external-nameservers&quot;&gt;here in their docs on how to update nameservers&lt;/a&gt;, otherwise you can &lt;a href=&quot;https://docs.netlify.com/domains-https/netlify-dns/delegate-to-netlify/&quot;&gt;use the official Netlify DNS docs&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Adding these will effectively pass over control of the domain to the Netlify dashboard, allowing you to control the domain records from the same UI as your web projects.&lt;/p&gt;&lt;p&gt;To finish up, click “Done” in Netlify Domains to complete the onboarding steps.&lt;/p&gt;&lt;h2 id=&quot;add-your-domain-to-a-netlify-project&quot;&gt;Add your domain to a Netlify project&lt;/h2&gt;&lt;p&gt;Once the domain is all configured and resolved you’ll be able to use it with a Netlify project. Head on over to a project, click on “Settings” and then “Domain management” in the sidebar.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card kg-width-wide&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2021/09/add-custom-domain.png&quot; class=&quot;kg-image&quot; alt=&quot;Add custom domain section in Netlity project&quot; loading=&quot;lazy&quot; width=&quot;1068&quot; height=&quot;693&quot; srcset=&quot;https://hub.darn.es/content/images/size/w600/2021/09/add-custom-domain.png 600w, https://hub.darn.es/content/images/size/w1000/2021/09/add-custom-domain.png 1000w, https://hub.darn.es/content/images/2021/09/add-custom-domain.png 1068w&quot; /&gt;&lt;/figure&gt;&lt;p&gt;If you click “Add custom domain” you’ll be presented with a similar custom domain field you saw in the domain set up process. You can add a bare domain or a subdomain.&lt;/p&gt;&lt;p&gt;Add your custom domain, whether it’s the root domain or subdomain, and click “Verify”. Click on “Yes, add domain” and boom, &lt;a href=&quot;https://twitter.com/cassidoo/status/1285616015620046849&quot;&gt;it’s done&lt;/a&gt;!&lt;/p&gt;&lt;h2 id=&quot;fine-tuning-and-gotchas&quot;&gt;Fine tuning and gotchas&lt;/h2&gt;&lt;p&gt;At this point of the tutorial I’d probably be showing you how to set up a record for redirecting the &lt;code&gt;www&lt;/code&gt; subdomain to your bare domain, but if you use a bare domain in a project Netlify it will automatically create the record ?&lt;/p&gt;&lt;p&gt;You do also have full control over your domain records too, letting you point domains to external platforms or records for verification purposes or whatever you need.&lt;/p&gt;&lt;p&gt;This isn’t required, but you may want to ensure that your custom domain is the defacto address for your site by redirecting your Netlify app subdomain. Redirecting it can be done by adding the following to a file called &lt;code&gt;_redirects&lt;/code&gt; to the root of your project:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-txt&quot;&gt;http://myproject.netlify.app/* http://myproject.com/:splat 301!
https://myproject.netlify.app/* https://myproject.com/:splat 301!
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Note that you’ll need to replace the URLs with your actual Netlify subdomain and custom domain.&lt;/p&gt;&lt;h3 id=&quot;removing-records&quot;&gt;Removing records&lt;/h3&gt;&lt;p&gt;The only gotcha I encountered during this process was around removing records. When you add a custom domain to a project a &lt;code&gt;NETLIFY&lt;/code&gt; record is automatically created, which under the hood is actually an &lt;code&gt;A&lt;/code&gt; record. These records can only be controlled via the project that created them, and at present can’t be removed. This isn’t entirely an issue, as if the domain is removed from the project a “Not found” error is returned instead.&lt;/p&gt;&lt;p&gt;If you really want the record removed then &lt;a href=&quot;https://community.netlify.com/&quot;&gt;get in touch with the Netlify support team&lt;/a&gt; and they’ll help you from there.&lt;/p&gt;&lt;h2 id=&quot;rounding-up&quot;&gt;Rounding up&lt;/h2&gt;&lt;p&gt;If you’re facing problems it’s always worth checking out the &lt;a href=&quot;https://docs.netlify.com/domains-https/custom-domains/&quot;&gt;official Netlify docs&lt;/a&gt; and &lt;a href=&quot;https://community.netlify.com/&quot;&gt;surfing the community forum&lt;/a&gt; for further guidance.&lt;/p&gt;&lt;p&gt;I do like the experience that Netlify has created around domains, however I am a little biased as I use them for most of my web projects. I think the interface and experience is a little rough round the edges, but I expect this to only get smoother and more elegant over time.&lt;/p&gt;&lt;p&gt;Regardless, having my web projects and domain management in one place really plays into my organisational mind. I hope you found this guide helpful, if you did feel free to give it a share.&lt;/p&gt;&lt;p&gt;??&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Let’s Learn Ghost on the Jamstack! Livestream Q &amp; A</title>
    <link>https://darn.es/learnwithjason-q-and-a/
    <updated>2021-09-19T16:39:41.000+00:00</updated>
    <id>https://darn.es/learnwithjason-q-and-a/</id>
    <content type="html">

        &lt;p&gt;I recently joined &lt;a href=&quot;https://twitter.com/jlengstorf&quot;&gt;Jason Lengstorf&lt;/a&gt; on his Twitch show &lt;a href=&quot;https://www.learnwithjason.dev/&quot;&gt;Learn With Jason&lt;/a&gt;. During the livestream we demonstrated the possibilities of using &lt;a href=&quot;https://ghost.org/changelog/jamstack/&quot;&gt;Ghost as a Headless CMS&lt;/a&gt;. Check out the full recording of the stream &lt;a href=&quot;https://www.learnwithjason.dev/let-s-learn-ghost-on-the-jamstack&quot;&gt;over on the Learn With Jason site&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I had a great time chatting with Jason and the audience. However in all the excitement I didn’t get around to answering all the questions from the live chat. Thankfully with the power of Twitch Chat Reply and an &lt;a href=&quot;https://github.com/freaktechnik/twitch-chatlog&quot;&gt;npm script called ‘twitch-chatlog’&lt;/a&gt; I was able to go back in time and pull out all the questions people had during the livestream.&lt;/p&gt;&lt;p&gt;Here’s a somewhat brief Q &amp;amp; A on those questions:&lt;/p&gt;&lt;blockquote&gt;How can I become a Ghost?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/streamingRafa/&quot;&gt;streamingRafa&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;The more I think about this question the darker it becomes. I’m not willing to answer.&lt;/p&gt;&lt;blockquote&gt;So Ghost is like WordPress of node?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/redetg/&quot;&gt;redetg&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Ghost is a CMS focused on publishing, built on Node.js. I’d highly recommend checking out our &lt;a href=&quot;https://ghost.org/vs/wordpress/&quot;&gt;WordPress comparison page&lt;/a&gt;, it’ll show you what the differences are and help you decide if Ghost is right for you.&lt;/p&gt;&lt;blockquote&gt;Is he ghosting us?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/me8bot/&quot;&gt;me8bot&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Definitely not heard this one before… but seriously, sorry if I missed your question the first time round.&lt;/p&gt;&lt;blockquote&gt;What do we do about custom fields, and is there a way to make custom cards?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/thedotmack/&quot;&gt;thedotmack&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;I attempted to answer this question during the livestream, but I can’t really reply without asking ‘what are you trying to achieve?’. You’ll be surprised what you can do with Ghost. Key value pairs tend to be an easy answer for developers to grab, rather than thinking further into what the final goal is.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card kg-width-full kg-card-hascaption&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2021/09/mae-mu-IZ0LRt1khgM-unsplash.jpg&quot; class=&quot;kg-image&quot; alt=&quot;&quot; loading=&quot;lazy&quot; width=&quot;2000&quot; height=&quot;1600&quot; srcset=&quot;https://hub.darn.es/content/images/size/w600/2021/09/mae-mu-IZ0LRt1khgM-unsplash.jpg 600w, https://hub.darn.es/content/images/size/w1000/2021/09/mae-mu-IZ0LRt1khgM-unsplash.jpg 1000w, https://hub.darn.es/content/images/size/w1600/2021/09/mae-mu-IZ0LRt1khgM-unsplash.jpg 1600w, https://hub.darn.es/content/images/size/w2400/2021/09/mae-mu-IZ0LRt1khgM-unsplash.jpg 2400w&quot; /&gt;&lt;figcaption&gt;Photo by &lt;a href=&quot;https://unsplash.com/@picoftasty?utm_source=ghost&amp;amp;utm_medium=referral&amp;amp;utm_campaign=api-credit&quot;&gt;Mae Mu&lt;/a&gt; / &lt;a href=&quot;https://unsplash.com/?utm_source=ghost&amp;amp;utm_medium=referral&amp;amp;utm_campaign=api-credit&quot;&gt;Unsplash&lt;/a&gt;&lt;/figcaption&gt;&lt;/figure&gt;&lt;blockquote&gt;Can you use Ghost to make a sandwich?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/streamingRafa/&quot;&gt;streamingRafa&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;I mean, I guess? Ghost would be a good way to write up sandwich recipes!&lt;/p&gt;&lt;blockquote&gt;&lt;a href=&quot;https://isthisasandwich.netlify.com/&quot;&gt;Is Ghost a sandwich?&lt;/a&gt;&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/vinny_code/&quot;&gt;vinny_code&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;No, it is not…&lt;/p&gt;&lt;blockquote&gt;Ghost is a CMS right?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/thorsmightyarse/&quot;&gt;thorsmightyarse&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Yes, it is!&lt;/p&gt;&lt;blockquote&gt;Aren’t we gonna do a from scratch without the starter?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/thorsmightyarse/&quot;&gt;thorsmightyarse&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Yes! You totally can, and we did. Check out &lt;a href=&quot;https://github.com/jlengstorf/lets-learn-ghost&quot;&gt;the repo Jason put up&lt;/a&gt; which contains an Eleventy site we put together from scratch during the livestream.&lt;/p&gt;&lt;blockquote&gt;So I could use this with Eleventy?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/thorsmightyarse/&quot;&gt;thorsmightyarse&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Heck yea! I mentioned on the livestream I’m trying to rebuild my site with Ghost and Eleventy at the minute. I’m using &lt;a href=&quot;https://github.com/TryGhost/eleventy-starter-ghost&quot;&gt;our Eleventy starter&lt;/a&gt; as a base.&lt;/p&gt;&lt;blockquote&gt;So Ghost is mainly focussed on making it easy to create a blog?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/thorsmightyarse/&quot;&gt;thorsmightyarse&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Pretty much. Ghost is all &lt;a href=&quot;https://ghost.org/features/&quot;&gt;about publishing&lt;/a&gt;, blogging is a great example of that.&lt;/p&gt;&lt;blockquote&gt;So I wanted to use a video on a page. I put it in a card. Embed card, and then moved it with javascript. Instead of bringing data in to the handlebars template&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/thedotmack/&quot;&gt;thedotmack&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Sounds like you nailed the use of embed cards, nice job! &lt;a href=&quot;https://ghost.org/faq/using-the-editor/#using-the-dynamic-menu&quot;&gt;Cards in Ghost&lt;/a&gt; allow you to drop code blocks, YouTube videos, CodePen demos and all sorts of things directly into your content. The custom embed and HTML cards are probably the most appealing to the developers amongst us, allowing you to drop completely custom HTML right in the middle of your posts and pages.&lt;/p&gt;&lt;blockquote&gt;We’re using Ghost in work to power a Gatsby site. It is ??&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/thepaulmcbride/&quot;&gt;thepaulmcbride&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Awesome! If you read this post please share it, would love to see how Ghost is being used in the wild ??&lt;/p&gt;&lt;blockquote&gt;Spooky? Spoopy?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/SchabrechtsK/&quot;&gt;SchabrechtsK&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Pretty spooky, really spoopy ??&lt;/p&gt;&lt;blockquote&gt;Could you show Gatsby/GraphQL pulling stuff from Ghost? ??&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/programatiko/&quot;&gt;programatiko&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;I think we did cover this in the stream, however if you want some more examples of using GraphQL with Ghost then check out &lt;a href=&quot;https://ghost.org/docs/api/v3/gatsby/graphql-recipes-for-ghost/&quot;&gt;this recipes page in our docs&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;I tried WP but it’s so slow :(&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/SchabrechtsK/&quot;&gt;SchabrechtsK&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote&gt;Story of my life&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/andrewlitchford/&quot;&gt;andrewlitchford&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;??&lt;/p&gt;&lt;blockquote&gt;What would be the differences/advantages of using Ghost compared to Netlify CMS with Eleventy?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/thorsmightyarse/&quot;&gt;thorsmightyarse&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;I’d say the key differences are the editing experience and the way data is stored. Ghost provides a strong publishing experience out of the box, while Netlify CMS can provide a really custom editing experience if you’re willing to put the work in. Ghost stores it’s data in a database, while Netlify CMS stores data in the repo files.&lt;/p&gt;&lt;p&gt;I think their advantages over each other would only come through when set against the task at hand. Essentially, you need to work out what tool is best for the job.&lt;/p&gt;&lt;blockquote&gt;Can you expose content from Ghost which is draft, staged and publish? Different API endpoints?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/philhawksworth/&quot;&gt;philhawksworth&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;For sure! Only published posts are exposed in the Content API, however the Admin API gives you access to drafted and scheduled posts as well. You can find out more in &lt;a href=&quot;https://ghost.org/docs/api/v3/javascript/admin/&quot;&gt;our API docs&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;Does Ghost also do that &lt;em&gt;(provide an API)&lt;/em&gt; out of the box? So without Gatsby?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/SchabrechtsK/&quot;&gt;SchabrechtsK&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote&gt;Don’t understand why you would need GraphQL for building static site though?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/thorsmightyarse/&quot;&gt;thorsmightyarse&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Ghost has a great &lt;a href=&quot;https://ghost.org/docs/api/v3/&quot;&gt;API&lt;/a&gt; for pulling content, and the &lt;a href=&quot;https://ghost.org/docs/api/v3/javascript/content/&quot;&gt;JavaScript Content API Client Library&lt;/a&gt; makes your content even more accessible. It’s one of the main reasons I was so keen to make the Eleventy starter, because the API fit really well with Eleventy’s main configuration file.&lt;/p&gt;&lt;p&gt;You don’t have to use GraphQL, you can use the JavaScript Content API that I mentioned before. However if you want to plug Ghost into an existing React or Gatsby site then the &lt;a href=&quot;https://github.com/TryGhost/gatsby-source-ghost&quot;&gt;gatsby-source-ghost source plugin&lt;/a&gt; might be the way to go.&lt;/p&gt;&lt;blockquote&gt;So content creators would need Ghost downloaded on their device?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/andrewpgilliland/&quot;&gt;andrewpgilliland&lt;/a&gt;&lt;/blockquote&gt;&lt;blockquote&gt;…is there a hosted Ghost service or do authors have to have a self-hosted instance?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/philhawksworth/&quot;&gt;philhawksworth&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;I think you’re getting confused with the local install of Ghost we used. Ghost is completely &lt;a href=&quot;https://github.com/TryGhost/Ghost&quot;&gt;open source&lt;/a&gt;, you can go ahead and install it locally without barriers. Doing so will create a local install of the Ghost admin interface and a site running alongside it. However for other people to see your site, and for your deployed &lt;a href=&quot;https://jamstack.org/&quot;&gt;Jamstack&lt;/a&gt; site to retrieve content from it, you’ll need to have a hosted installation running somewhere on the internet.&lt;/p&gt;&lt;p&gt;For hosting options you could use something like &lt;a href=&quot;https://www.digitalocean.com/&quot;&gt;DigitalOcean&lt;/a&gt;, they even have &lt;a href=&quot;https://marketplace.digitalocean.com/apps/ghost&quot;&gt;a ‘Droplet’&lt;/a&gt; for you to spin up a Ghost installation quickly. While this is probably the cheapest option you do still have to maintain the installation yourself, if you’re like me you won’t enjoy server maintenance.&lt;/p&gt;&lt;p&gt;The alternative is &lt;a href=&quot;https://ghost.org/&quot;&gt;signing up for Ghost(Pro)&lt;/a&gt;, which is our platform offering. We handle all the hosting and maintenance for you, and provide customer support whenever you need it. Check out &lt;a href=&quot;https://ghost.org/pricing/&quot;&gt;our pricing page&lt;/a&gt; for a full breakdown on features and benefits. Jason covered the topic of &lt;a href=&quot;https://youtu.be/pOGjVNC1sk4?t=2885&quot;&gt;time over money really well during the livestream&lt;/a&gt;.&lt;/p&gt;&lt;blockquote&gt;For the preview section of Ghost admin, can we point it to the custom front-end say the GatsbyJS website to show up in the preview of Ghost admin panel?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/saiyugi/&quot;&gt;saiyugi&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Yes! I made this handy snippet that will redirect all your pages to your Jamstack counterpart which you can drop into your site footer code injection area within your Ghost admin:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot;&gt;&amp;lt;script type=&quot;text/javascript&quot;&amp;gt;
    if (location.hostname.includes(&#39;ghost.io&#39;) &amp;amp;&amp;amp; !location.href.includes(&#39;ghost.io/p/&#39;)) {
        location.hostname = &#39;my-jamstack-site.com&#39;;
    }
&amp;lt;/script&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This snippet also accounts for previews which will be best shown in the internal Ghost theme layer.&lt;/p&gt;&lt;blockquote&gt;Requesting permission to tweet: &lt;a href=&quot;https://clips.twitch.tv/LongAssiduousZebraRlyTho&quot;&gt;“mood while coding”&lt;/a&gt;&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/NMeuleman/&quot;&gt;NMeuleman&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;&lt;a href=&quot;https://clips.twitch.tv/LongAssiduousZebraRlyTho&quot;&gt;Extremely relatable, very tweetable.&lt;/a&gt;&lt;/p&gt;&lt;blockquote&gt;&lt;a href=&quot;https://www.zachleat.com/web/eleventy/&quot;&gt;Zach Leatherman&lt;/a&gt; would be proud of you two&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/saiafonua/&quot;&gt;saiafonua&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;I sure hope so ??&lt;/p&gt;&lt;blockquote&gt;Do you guys have a website where I can go through steps by steps to get started with Ghost?&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/benidibatia/&quot;&gt;benidibatia&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Best places to check out are our &lt;a href=&quot;https://ghost.org/docs/&quot;&gt;documentation&lt;/a&gt;, &lt;a href=&quot;https://ghost.org/tutorials/&quot;&gt;tutorials&lt;/a&gt; and &lt;a href=&quot;https://forum.ghost.org/&quot;&gt;community forum&lt;/a&gt; filled with helpful references on using Ghost.&lt;/p&gt;&lt;blockquote&gt;Thank you Jason and Dave! Awesome episode!&lt;br /&gt;– &lt;a href=&quot;https://twitch.tv/saiafonua/&quot;&gt;saiafonua&lt;/a&gt;&lt;/blockquote&gt;&lt;p&gt;Thank &lt;strong&gt;you&lt;/strong&gt; for joining the livestream! Hopefully we’ll get to do this again sometime.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-embed-card&quot;&gt;&lt;blockquote class=&quot;twitter-tweet&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I’m ready yo, where u at? &lt;a href=&quot;https://t.co/GbRzTuXqnS&quot;&gt;pic.twitter.com/GbRzTuXqnS&lt;/a&gt;&lt;/p&gt;&amp;mdash; Rafa (@rafahari) &lt;a href=&quot;https://twitter.com/rafahari/status/1247577207817601024?ref_src=twsrc%5Etfw&quot;&gt;April 7, 2020&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;https://platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;
&lt;/figure&gt;&lt;p&gt;??&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Building a Netlify Build Plugin</title>
    <link>https://darn.es/building-a-netlify-build-plugin/
    <updated>2021-09-04T21:26:22.000+00:00</updated>
    <id>https://darn.es/building-a-netlify-build-plugin/</id>
    <content type="html">

        &lt;p&gt;Netlify &lt;a href=&quot;https://www.netlify.com/build/plugins-beta/&quot;&gt;Build Plugins&lt;/a&gt; let you tap into the different phases in the build process that happen on Netlify. After being invited to the beta I spent some time figuring out what I could do and built a plugin of my own, a &lt;a href=&quot;https://github.com/daviddarnes/netlify-plugin-ghost-markdown&quot;&gt;build plugin to generate markdown from Ghost&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;what-are-netlify-build-plugins&quot;&gt;What are Netlify Build Plugins?&lt;/h2&gt;&lt;p&gt;Every time Netlify starts a build it begins a ‘lifecycle’. A lifecycle is made up of &lt;a href=&quot;https://github.com/netlify/build#build-lifecycle&quot;&gt;events&lt;/a&gt;:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;code&gt;onInit&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;onPreBuild&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;onBuild&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;onPostBuild&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;onSuccess&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;onError&lt;/code&gt;&lt;/li&gt;&lt;li&gt;&lt;code&gt;onEnd&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;All these events happen in the above order, exceptions being &lt;code&gt;onSuccess&lt;/code&gt; and &lt;code&gt;onError&lt;/code&gt; for successful and failing builds respectively. Build plugins give you the chance to step in with your own code during any of these lifecycle events. You can use vanilla JavaScript in a directory within your project, or some code wrapped up in an npm package. You can read more about them on the &lt;a href=&quot;https://github.com/netlify/build#readme&quot;&gt;official GitHub repo&lt;/a&gt; as well as &lt;a href=&quot;https://www.netlify.com/blog/2019/10/16/creating-and-using-your-first-netlify-build-plugin/&quot;&gt;this article by Sarah Drasner&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;what-can-you-use-them-for&quot;&gt;What can you use them for?&lt;/h2&gt;&lt;p&gt;Well, to be frank with you, I wasn’t entirely sure. For quite a while after the announcement I thought “If I want to run some code before my build I’ll add it in before my build in the project ???????”. However after looking at some of the examples my mindset began to shift, for example a &lt;a href=&quot;https://github.com/Munter/netlify-plugin-checklinks&quot;&gt;plugin by Peter Müller which checks links&lt;/a&gt; at the &lt;code&gt;onPostBuild&lt;/code&gt; event and stops the deployment if there’s a broken link in the build.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card kg-width-wide&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/netlify-build-plugin-table.jpg&quot; class=&quot;kg-image&quot; alt=&quot;Example build plugins&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;It wasn’t until a late drive home from &lt;a href=&quot;https://newadventuresconf.com/2020/&quot;&gt;NA Conf&lt;/a&gt; while listening to &lt;a href=&quot;https://fishandscripts.com/&quot;&gt;Fish and Scripts&lt;/a&gt; that an idea dawned on me. I had already encountered a use case before, but with the use of build plugins I could improve it. Not too long ago I wrote a tutorial on &lt;a href=&quot;https://david.darn.es/tutorial/2019/08/11/use-ghost-with-jekyll/&quot;&gt;how to use Ghost with Jekyll&lt;/a&gt;, where I used &lt;a href=&quot;https://gulpjs.com/&quot;&gt;gulp.js&lt;/a&gt; to pull in content via the &lt;a href=&quot;https://ghost.org/docs/api/v3/javascript/content/&quot;&gt;Ghost Content API&lt;/a&gt; and generated markdown files for &lt;a href=&quot;https://jekyllrb.com/docs/posts/&quot;&gt;Jekyll to comfortably consume&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;It was a clever solution, but not what I would call ‘clean’. Using gulp.js locally would mean you’d have to commit untouchable markdown files to your repo, because their contents is sourced from your install of Ghost. Using gulp.js on Netlify was much better but you’re still using a pair of mismatched build tools, gulp.js and Jekyll.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card kg-width-full&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/netlify-build-plugin-banner.png&quot; class=&quot;kg-image&quot; alt=&quot;Main banner graphic&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;If I was to tap into the &lt;code&gt;onPreBuild&lt;/code&gt; phase of the Netlify build lifecycle I could generate the markdown files at that point and then let Jekyll run its normal course. I could also wrap the code up in a neat plugin that others could use, possibly with other static site generators like Hugo and Eleventy!&lt;/p&gt;&lt;h2 id=&quot;the-set-up&quot;&gt;The set up&lt;/h2&gt;&lt;p&gt;Netlify build plugins can be written in Node JavaScript wrapped in a module, aka &lt;code&gt;module.exports&lt;/code&gt;. Plugins can tap into any event in the lifecycle, even multiple events. Here’s how my plugin assigns a async function to the &lt;code&gt;onPreBuild&lt;/code&gt; event:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = {
  name: &quot;netlify-plugin-ghost-markdown&quot;,
  onPreBuild: async () =&amp;gt; {
    // Using async so Netlify waits for it
  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;To make Netlify aware of this file it needs to be referenced in the configuration file. When working on this plugin I really struggled to get my head around the &lt;code&gt;.toml&lt;/code&gt; format. Thankfully &lt;code&gt;.yaml&lt;/code&gt; files are are supported within the beta as well, which I find more readable.&lt;/p&gt;&lt;p&gt;Build plugins can be local, by referencing a directory, or an installed dependency.&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;plugins:
  - package: &quot;netlify-plugin-ghost-markdown&quot;
  # Could also be &quot;./_plugins/custom-netlify-plugin&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/netlify/build#netlify-configuration&quot;&gt;build plugins repo readme&lt;/a&gt; for more details.&lt;/p&gt;&lt;h2 id=&quot;using-dependencies&quot;&gt;Using dependencies&lt;/h2&gt;&lt;p&gt;It gets a bit meta when using dependencies in a local plugin because you’ll essentially be starting up a new mini JavaScript project, &lt;code&gt;package.json&lt;/code&gt; and all. That’s partly why I wrapped the plugin in an npm package. As a package you can install it alongside any other dependency in the main project it’s being used in.&lt;/p&gt;&lt;p&gt;As mentioned earlier, build plugins use Node, so if you’re familiar with writing JavaScript then you’re going to be fairly comfortable with this. For example the dependency importing is the standard &lt;code&gt;require()&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// Example dependency includes
const path = require(&quot;path&quot;);
const fetch = require(&quot;node-fetch&quot;);
const ghostContentAPI = require(&quot;@tryghost/content-api&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;config-variables&quot;&gt;Config variables&lt;/h2&gt;&lt;p&gt;For my plugin to work for everyone I needed a way to let them configure it from the &lt;code&gt;netlify.yaml&lt;/code&gt; file in their project. Build plugins use the following syntax to state config values:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;plugins:
  - package: &quot;netlify-plugin-ghost-markdown&quot;
    config:
      ghostKey: &quot;1234567890&quot;
      assetsDir: &quot;./images/&quot;
      pagesDir: &quot;./pages/&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Within the plugin code a single parameter is passed. &lt;code&gt;pluginConfig&lt;/code&gt; is one of the properties on the parameter, which contains all the plugin config values. In the example below I’m using &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment&quot;&gt;destructuring&lt;/a&gt; to grab only the config values object:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;module.exports = {
  name: &quot;netlify-plugin-ghost-markdown&quot;,
  onPreBuild: async ({ pluginConfig }) =&amp;gt; {

    // Logging them here as an example of context use
    console.log(
      pluginConfig.ghostKey,
      pluginConfig.assetsDir,
      pluginConfig.pagesDir
    );

  }
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Destructuring can be really handy here, especially with default values incase the user of the plugin hasn’t set any.&lt;/p&gt;&lt;p&gt;In my case the defaults are the typical file structure of a Jelyll site, but if those values are set then they’ll get overwritten:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;onPreBuild: async ({
  pluginConfig: {
    ghostURL,
    ghostKey,
    assetsDir = &quot;./assets/images/&quot;,
    pagesDir = &quot;./&quot;,
    postsDir = &quot;./_posts/&quot;,
    postDatePrefix = true
  }
}) =&amp;gt; {
  // Magic...
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Having control over those values means it can be used with any SSG that accepts markdown files, such as &lt;a href=&quot;https://gohugo.io/getting-started/directory-structure/&quot;&gt;Hugo&lt;/a&gt; or &lt;a href=&quot;https://www.11ty.dev/docs/data-template-dir/&quot;&gt;Eleventy&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;using-a-plugin&quot;&gt;Using a plugin&lt;/h2&gt;&lt;p&gt;At first I thought when using a Netlify Plugin you only needed to reference it in the &lt;code&gt;netlify.yaml&lt;/code&gt; file, however you do also need to install it as an npm package like so:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot;&gt;npm install --save netlify-plugin-ghost-markdown
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;So if you’re using the plugin in a Jekyll project it’s going to look a bit strange having a &lt;code&gt;package.json&lt;/code&gt; in there too. So make sure to add it to the excludes list in your &lt;code&gt;config.yaml&lt;/code&gt;.&lt;/p&gt;&lt;p&gt;Then it’s a matter of referencing and configuring the plugin in the &lt;code&gt;netlify.yaml&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot;&gt;plugins:
  - package: &quot;netlify-plugin-ghost-markdown&quot;
    config:
      ghostURL: &quot;https://YOURGHOST.URL&quot;
      ghostKey: &quot;YOURGHOSTKEY&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;wrapping-up&quot;&gt;Wrapping up&lt;/h2&gt;&lt;p&gt;I’ve provided &lt;a href=&quot;https://github.com/daviddarnes/netlify-plugin-ghost-markdown#netlify-ghost-markdown-build-plugin&quot;&gt;installation and usage instructions&lt;/a&gt; in the repo for my plugin. You’re also welcome to dig around the code. It’s less complex than other plugins I’ve seen, which may help you to get your head around the concept.&lt;/p&gt;&lt;p&gt;If you’re using this plugin, or using it to help yourself to understand Netlify Build Plugins, do &lt;a href=&quot;https://twitter.com/DavidDarnes&quot;&gt;let me know on Twitter&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;??&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Page translations and multi-language selects</title>
    <link>https://darn.es/multi-language-select/
    <updated>2020-03-08T21:13:01.000+00:00</updated>
    <id>https://darn.es/multi-language-select/</id>
    <content type="html">

        &lt;p&gt;Multi-language sites are straight up hard to do. You can automate, plugin and redirect all you like, but you’ll still be left with the reality that you’ll be dealing with multiple instances of the same thing. I’ve worked on multi-language sites before, back in my WordPress saga days, and it sure got complicated.&lt;/p&gt;&lt;p&gt;You would think there’s standard HTML spec thingers to handle this kinda stuff? Well, there is! I’ve recently been expanding &lt;a href=&quot;https://ghost.org/tutorials/&quot;&gt;our catalog of tutorials for Ghost&lt;/a&gt; and one of them was a guide on &lt;a href=&quot;https://ghost.org/tutorials/multi-language-content/&quot;&gt;using multiple languages in Ghost&lt;/a&gt;. While working on this, &lt;a href=&quot;https://kymellis.co/&quot;&gt;Kym&lt;/a&gt; from the team enlightened me about &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements that denote alternate versions of the same page.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;link rel=&quot;alternate&quot; href=&quot;https://mirror.site.com/&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; element would reside within the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; element of the page. I guess it acts a bit like &lt;code&gt;canonical&lt;/code&gt;, but not to the extent of saying “this is the original”. &lt;a href=&quot;https://microformats.org/wiki/rel-alternate&quot;&gt;Examples can be found on microformats.org&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;using-rel-alternate-with-translations&quot;&gt;Using &lt;code&gt;rel=&quot;alternate&quot;&lt;/code&gt; with translations&lt;/h2&gt;&lt;p&gt;So, what can this attribute (and value) do to help our multi-language pain points? When the &lt;code&gt;rel=&quot;alternate&quot;&lt;/code&gt; attribute is used in conjunction with the &lt;code&gt;hreflang=&quot;&quot;&lt;/code&gt; attribute, it can denote translated versions of the currently viewed page.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;My web page in english&amp;lt;/title&amp;gt;
&amp;lt;link rel=&quot;alternate&quot; href=&quot;https://site.com/fr/&quot; hreflang=&quot;fr&quot; /&amp;gt;
&amp;lt;link rel=&quot;alternate&quot; href=&quot;https://site.com/de/&quot; hreflang=&quot;de&quot; /&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Search engines, like Google, will index the pages, along with the translated counterparts that’ve been referenced with the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; element. There’s a bit &lt;a href=&quot;https://support.google.com/webmasters/answer/189077&quot;&gt;more info here on this Google Support page&lt;/a&gt;. Google will then serve the user whatever page is right for them, depending on their region, using the &lt;code&gt;hreflang&lt;/code&gt; value as a reference.&lt;/p&gt;&lt;p&gt;Further details on applying this kind of meta information to your web pages can be found in the &lt;a href=&quot;https://moz.com/learn/seo/hreflang-tag&quot;&gt;Moz learning resources&lt;/a&gt;. Additionally, Nomensa have covered these attributes, as well as other microformats for &lt;a href=&quot;https://www.nomensa.com/blog/2010/7-tips-for-multi-lingual-website-accessibility&quot;&gt;creating accessible multi-lingual sites&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;building-a-language-select-dropdown&quot;&gt;Building a language select dropdown&lt;/h2&gt;&lt;p&gt;Let’s circle back to the original point of this tutorial: creating a language select. I’ve approached this in the same fashion I do most interactions - I’m using JavaScript to enhance what already exists on the page.&lt;/p&gt;&lt;p&gt;I’m using the existing &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements that state the translations for the page to generate a list of links that’ll take the user to one of those translations. Rather than give a full breakdown of the code, I’ve provided an annotated version of the core functionality below. &lt;a href=&quot;https://codepen.io/daviddarnes/pen/QWwzePz?editors=1010&quot;&gt;Check out this CodePen&lt;/a&gt; to see everything in action, including an accessible method of toggling the language select (thanks &lt;a href=&quot;https://hankchizljaw.com/wrote/a-progressive-disclosure-component/&quot;&gt;Andy Bell&lt;/a&gt;).&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;head&amp;gt;
  &amp;lt;!-- all my translations for the currently viewed page --&amp;gt;
  &amp;lt;link rel=&quot;alternate&quot; hreflang=&quot;fr&quot; href=&quot;https://site.com/fr/&quot; /&amp;gt;
  &amp;lt;link rel=&quot;alternate&quot; hreflang=&quot;jp&quot; href=&quot;https://site.com/jp/&quot; /&amp;gt;
  &amp;lt;link rel=&quot;alternate&quot; hreflang=&quot;de&quot; href=&quot;https://site.com/de/&quot; /&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;!-- Details element in markup, ready for JavaScript --&amp;gt;
&amp;lt;div data-language-select&amp;gt;&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;pre&gt;&lt;code&gt;// Grab the details element that will be the language select
const langSelect = document.querySelector(&quot;[data-language-select]&quot;);

// Grab all the alternate translations as an array
const translations = [...document.querySelectorAll(&quot;head [hreflang]&quot;)];

// Check if both select and translations exist
if (langSelect &amp;amp;&amp;amp; translations.length) {
  // Build a list of anchors from the translations
  const links = translations
    .map(link =&amp;gt; {
      return `
      &amp;lt;li&amp;gt;
        &amp;lt;a href=&quot;${link.href}&quot; hreflang=&quot;${link.hreflang}&quot;&amp;gt;${link.hreflang}&amp;lt;/a&amp;gt;
      &amp;lt;/li&amp;gt;
    `;
    })
    .join(&quot;&quot;);

  // Insert a summary showing the current language
  // and insert the links into a unordered list
  langSelect.innerHTML = `
    &amp;lt;button type=&quot;button&quot; aria-expanded=&quot;false&quot;&amp;gt;Language: ${document.documentElement.lang}&amp;lt;/button&amp;gt;
    &amp;lt;ul&amp;gt;${links}&amp;lt;/ul&amp;gt;
  `;
}&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;One thing I should note is that the above assumes you’ve set a &lt;code&gt;lang=&quot;&quot;&lt;/code&gt; attribute on the &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt; element, which you should definitely do so users know what language the content is in.&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;What I really like about this method is that if feels like the ‘right way’. We’re using standard methods of marking our content and our translated versions alongside them.&lt;/p&gt;&lt;p&gt;We’re also not trying to be clever. I worked way too hard in trying to automate translations on those WordPress sites; there’s a reason professional translators exist. The same subject is covered, amongst others, here in &lt;a href=&quot;https://webdesign.tutsplus.com/articles/tips-for-designing-and-building-a-multilingual-website--cms-24708&quot;&gt;this Tuts+ article on building a multi-lingual site&lt;/a&gt;. Get a professional to translate your content and when it’s done, add the &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; elements in later.&lt;/p&gt;&lt;p&gt;Let me know your thoughts &lt;a href=&quot;https://twitter.com/DavidDarnes/&quot;&gt;on Twitter&lt;/a&gt;. If you’re feeling kind, give this article a share. Thanks for reading ?&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Minimum viable analytics</title>
    <link>https://darn.es/minimum-viable-analytics/
    <updated>2020-03-08T14:38:43.000+00:00</updated>
    <id>https://darn.es/minimum-viable-analytics/</id>
    <content type="html">

        &lt;p&gt;I recently switched all my personal project sites to &lt;a href=&quot;https://netlify.com/&quot;&gt;Netlify&lt;/a&gt;. I’d like to share how I made the move, my experiences, and the tooling I use to manage domains and track analytics.&lt;/p&gt;&lt;h2 id=&quot;domains&quot;&gt;Domains&lt;/h2&gt;&lt;p&gt;Ever since I got into the hobby of domain hoarding, I’ve used &lt;a href=&quot;https://www.gandi.net/&quot;&gt;Gandi.net&lt;/a&gt;. It might not be the most popular hosting platform, but I’ve had a great experience with it from the beginning: reasonable pricing and fairly prompt customer support, with a pretty wide selection of TLDs, too.&lt;/p&gt;&lt;h2 id=&quot;netlify-dns&quot;&gt;Netlify DNS&lt;/h2&gt;&lt;p&gt;Up until now, I’ve been managing my domains with &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;Cloudflare&lt;/a&gt;, adding Cloudflare nameservers to the Gandi admin. Cloudflare gave me more control over my domains, including a selection of features from their free tier, such as Analytics. This feature was nice to enable you to see viewing stats, but it doesn’t show metrics for specific URLs. I guess it’s more for monitoring overall traffic, rather than for finding out how well a particular blog post is doing.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/cloudflare-analytics.png&quot; class=&quot;kg-image&quot; alt=&quot;Cloudflare Analytics&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Another feature I used is the &lt;a href=&quot;https://www.cloudflare.com/apps/googleanalytics&quot;&gt;Google Analytics ‘App’&lt;/a&gt;, which links directly with Google Analytics. It’s a clever way to add your site to Google Analytics, as it saves you adding their analytics code to your codebase and environment variables. However, Google Analytics is a step too far in the wrong direction - all the different views, metrics, filters are pretty overwhelming. Let’s leave that thought here, though; I’ll save my Google Analytics gripes for later on.&lt;/p&gt;&lt;p&gt;I found out &lt;a href=&quot;https://docs.netlify.com/domains-https/netlify-dns/&quot;&gt;Netlify could manage my domains&lt;/a&gt; by accident when I was configuring &lt;a href=&quot;https://darn.es/&quot;&gt;my main site&lt;/a&gt; and the site you’re on now. Netlify offers both the ability to buy domains through them or manage domains in the same way Cloudflare does, through adding their nameservers to whatever platform you bought the domain (in my case, Gandi).&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/netlify-dns.png&quot; class=&quot;kg-image&quot; alt=&quot;Netlify DNS records example&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;I was already onboard with Netlify and the idea of using their platform to manage my domain records sounded great. The most appealing feature is that you can actually see a Netlify site linked with a domain on their DNS service. Prior to this, I pointed Cloudflare to whatever hosting platform I was using and crossed my fingers until it worked. This new setup with Netlify feels much more cohesive.&lt;/p&gt;&lt;h2 id=&quot;netlify-and-netlify-analytics&quot;&gt;Netlify and Netlify Analytics&lt;/h2&gt;&lt;p&gt;As mentioned at the top of this article, I’m now hosting my personal sites on Netlify. While I was already a fan of their hosting, the analytics feature has become the most appealing thing to try out.&lt;/p&gt;&lt;p&gt;When using Google Analytics, it really bothered me that it requires you to use JavaScript on the client to find out what pages are being viewed. It’s intrusive, heavy handed, detrimental to performance, and in some ways, unreliable.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/netlify-analytics.png&quot; class=&quot;kg-image&quot; alt=&quot;Netlify Analytics&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;&lt;a href=&quot;https://www.netlify.com/products/analytics/&quot;&gt;Netlify Analytics&lt;/a&gt; has a far more elegant approach: it tracks page requests on the server, which is data that is already there. Rather than asking for information from someone’s computer with JavaScript, like Google Analytics does, the server makes a note of any URL requested. You also don’t have to store cookies on the user’s client - again, like Google Analytics does - avoiding the need to add those pesky ‘cookies’ banners.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/minimum-viable-analytics-banner.png&quot; class=&quot;kg-image&quot; alt=&quot;Netlify Analytics graph&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;The two most satisfying parts of using Netlify Analytics for me so far are the moment I turned it on, I saw a month of historical stats appear immediately, and then discovering all the 404 errors from bots trying to hack a non-existent WordPress site.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/netlify-analytics-not-found.png&quot; class=&quot;kg-image&quot; alt=&quot;Netlify Analytics panel showing a list of URLs to non-existent WordPress files&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Interestingly, I posted a similar shot to the above on Twitter and was told that in the last couple of hours, a serious vulnerability had been found in a WordPress plugin, where &lt;a href=&quot;https://twitter.com/ajeet_online/status/1229546973599977475&quot;&gt;over 200,000 sites were at risk&lt;/a&gt;. I’ve now enabled this feature on a couple of my sites and will be using it to track some stats to hopefully action them. Netlify Analytics is a nice in between, with the complexity shown in Google Analytics and the very high-level view in Cloudflare Analytics.&lt;/p&gt;&lt;h2 id=&quot;google-search-console&quot;&gt;Google Search Console&lt;/h2&gt;&lt;p&gt;Despite my negative opinion of Google Analytics, Google still does provide some useful tooling for SEO and Analytics. &lt;a href=&quot;https://search.google.com/search-console/about&quot;&gt;Google Search Console&lt;/a&gt;, previously known as Webmaster Tools, shares crawling info on your sites. Rather than adding JavaScript, Search Console can be enabled by &lt;a href=&quot;https://support.google.com/webmasters/answer/9008080#domain_name_verification&quot;&gt;adding a TXT record to your domain records&lt;/a&gt;. Again, this is unobtrusive to your audience and only gives you information that Google has already captured when they crawl your site, or when people use Google to find it.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/search-console.png&quot; class=&quot;kg-image&quot; alt=&quot;Search Console&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;There’s a fair bit of data that can be found in Search Console: top linked pages (also known as ‘backlinks’), top linking sites, and what people search for before arriving on your site. Two features I often use are submitting URLs for indexing and submitting my sitemap. Google will queue these up for crawling and let you know if there are any errors.&lt;/p&gt;&lt;h2 id=&quot;further-reading&quot;&gt;Further reading&lt;/h2&gt;&lt;p&gt;I’m not saying my setup is the defacto way to manage domains and record analytics, but it works well for me and I think it will work really well for my audience. Here are some helpful links if you want to achieve the same results:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.gandi.net/&quot;&gt;Pick a domain from Gandi.net&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://docs.gandi.net/en/domain_names/common_operations/changing_nameservers.html#contents&quot;&gt;Changing nameservers on Gandi&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=mN9oI98As_4&quot;&gt;Deploying a Netlify site from git&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://docs.netlify.com/domains-https/netlify-dns/&quot;&gt;Netlify DNS documentation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://docs.netlify.com/monitor-sites/analytics/&quot;&gt;Netlify Analytics documentation&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://support.google.com/webmasters/answer/9128668?hl=en&quot;&gt;About Google Search Console&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;??&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>How to use Ghost with Jekyll</title>
    <link>https://darn.es/use-ghost-with-jekyll/
    <updated>2020-03-08T14:41:09.000+00:00</updated>
    <id>https://darn.es/use-ghost-with-jekyll/</id>
    <content type="html">

        &lt;p&gt;Someone made an interesting query recently that I couldn’t help but take on as a challenge: Is there any way to use &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt; with &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;? Turns out there is, and for those that want to cut to the code &lt;a href=&quot;https://gist.github.com/daviddarnes/eb956c1a8b57f4249ea57516b06ca89e&quot;&gt;here’s a handy gist&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;I recently released a starter for using a &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt; site with the static site generator &lt;a href=&quot;https://11ty.io/&quot;&gt;Eleventy&lt;/a&gt;, check it out the &lt;a href=&quot;https://github.com/TryGhost/eleventy-starter-ghost/&quot;&gt;starter if you’re interested&lt;/a&gt;. I also wrote up about it &lt;a href=&quot;https://ghost.org/blog/eleventy/&quot;&gt;on the Ghost blog&lt;/a&gt;, which includes links to the Ghost docs on how to use Eleventy with Ghost.&lt;/p&gt;&lt;h2 id=&quot;set-the-scene&quot;&gt;Set the scene&lt;/h2&gt;&lt;p&gt;The relevancy of Jekyll to Eleventy? Well when we tweeted out the Eleventy post &lt;a href=&quot;https://twitter.com/maggerbo&quot;&gt;Mathias Aggerbo&lt;/a&gt; asked this:&lt;/p&gt;&lt;blockquote&gt;Are there any way to use Ghost with Jekyll?&lt;/blockquote&gt;&lt;p&gt;– &lt;a href=&quot;https://twitter.com/maggerbo/status/1159097416324440064&quot;&gt;Mathias Aggerbo&lt;/a&gt;&lt;/p&gt;&lt;p&gt;For those of you who know me fairly well you’ll know that Jekyll &lt;a href=&quot;https://www.siteleaf.com/blog/making-your-first-jekyll-theme-part-1/&quot;&gt;is&lt;/a&gt; &lt;a href=&quot;https://david.darn.es/2017/07/25/adding-heading-links-to-your-jekyll-blog/&quot;&gt;close&lt;/a&gt; &lt;a href=&quot;https://webdesign.tutsplus.com/tutorials/how-to-create-and-publish-a-jekyll-theme-gem--cms-27475&quot;&gt;to&lt;/a&gt; &lt;a href=&quot;https://david.darn.es/2016/05/17/jekyll-conf-lightning-talk/&quot;&gt;my&lt;/a&gt; &lt;a href=&quot;https://alembic.darn.es/&quot;&gt;heart&lt;/a&gt;, so I was keen to help find a solution.&lt;/p&gt;&lt;p&gt;But how? In my experience Jekyll isn’t known for working with APIs. Jekyll is designed as the more typical flat file CMS, taking text files (typically &lt;a href=&quot;https://jekyllrb.com/docs/step-by-step/08-blogging/&quot;&gt;markdown files&lt;/a&gt;) and turning them into html files. Once more it’s Ruby based, so JavaScript API libraries aren’t going to be the smoothest things to plug in.&lt;/p&gt;&lt;p&gt;Enter stage right &lt;a href=&quot;https://twitter.com/philhawksworth&quot;&gt;Phil Hawksworth&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;A pattern I’ve used for a lot with a variety of SSGs is to have something like Gulp run the build. It pulls data from APIs, stashes it in the data files the SSG prefers, then generates the site with the SSG.&lt;br /&gt;&lt;br /&gt;This can keep your options open so you can choose the tool you prefer.&lt;/blockquote&gt;&lt;p&gt;– &lt;a href=&quot;https://twitter.com/philhawksworth/status/1159193504851144705&quot;&gt;Phil Hawksworth&lt;/a&gt;&lt;/p&gt;&lt;p&gt;&lt;a href=&quot;https://gulpjs.com/&quot;&gt;gulp.js&lt;/a&gt; is a great tool, I often forget how useful and versatile it can be. The homepage text sums up gulp.js pretty well:&lt;/p&gt;&lt;blockquote&gt;gulp is a toolkit for automating painful or time-consuming tasks in your development workflow, so you can stop messing around and build something&lt;/blockquote&gt;&lt;p&gt;– &lt;a href=&quot;https://gulpjs.com/&quot;&gt;Gulp website&lt;/a&gt;&lt;/p&gt;&lt;p&gt;It’s designed to be used in the command line, as &lt;a href=&quot;https://gulpjs.com/docs/en/getting-started/creating-tasks&quot;&gt;gulp tasks&lt;/a&gt;. For example, I could create a task called &lt;code&gt;styles&lt;/code&gt; that turns a &lt;code&gt;.scss&lt;/code&gt; file into a &lt;code&gt;.css&lt;/code&gt; file, minifies that file and then clones it into my production directory. All by a running a single single command, &lt;code&gt;gulp styles&lt;/code&gt;. Very handy if you want to make custom file processing workflows and already have some familiarity with Node / JavaScript.&lt;/p&gt;&lt;h2 id=&quot;coding&quot;&gt;Coding&lt;/h2&gt;&lt;p&gt;Right, so we have our base components to achieve a link between Ghost and a Jekyll site:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;&lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt;: Where our content will be sourced from&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://ghost.org/docs/api/v2/javascript/&quot;&gt;Ghost Content API Library&lt;/a&gt;: How we’re going to get the content&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gulpjs.com/&quot;&gt;gulp.js&lt;/a&gt;: How we’re going to take that content and produce markdown files for Jekyll to consume&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;Because we’re using gulp.js all the following code is inside a single &lt;code&gt;gulpfile.js&lt;/code&gt;. If you’re a bit unfamiliar with gulp I’d recommend checking out the &lt;a href=&quot;https://gulpjs.com/docs/en/getting-started/quick-start&quot;&gt;gulp.js documentation&lt;/a&gt; on how to get started and it’s concepts.&lt;/p&gt;&lt;h3 id=&quot;source-content-via-api&quot;&gt;Source content via API&lt;/h3&gt;&lt;p&gt;The &lt;a href=&quot;https://www.npmjs.com/package/@tryghost/content-api&quot;&gt;JavaScript Client Library&lt;/a&gt; for Ghost makes this a fairly clean process. I’m just using the demo API configuration so you’ll need to replace this with the credentials of the Ghost site, more info on &lt;a href=&quot;https://ghost.org/docs/api/v2/javascript/content/#authentication&quot;&gt;how to get those credentials can be found here&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;In a &lt;code&gt;gulpfile.js&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;const gulp = require(&quot;gulp&quot;);
const ghostContentAPI = require(&quot;@tryghost/content-api&quot;);

// Create API instance with Ghost credentials
const api = new ghostContentAPI({
	url: &#39;https://demo.ghost.io&#39;,
	key: &#39;22444f78447824223cefc48062&#39;,
	version: &quot;v2&quot;
});

gulp.task(&#39;ghost&#39;, async function() {
	// Use API to get all posts
	// with their tag and author information
	const posts = await api.posts
		.browse({
			include: &quot;tags,authors&quot;,
			limit: &quot;all&quot;
		})
		.catch(err =&amp;gt; {
			console.error(err);
		});

    // ...
});&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;construct-an-array-of-files&quot;&gt;Construct an array of files&lt;/h3&gt;&lt;p&gt;We’ve got our API data, but we want to loop through that data and produce files from each post item. Out of the box gulp is designed to take “file A” and turn it into “file B”. We’ll need to bring in some dependencies that will allow us to turn data into files.&lt;/p&gt;&lt;p&gt;Here’s what I ended up using:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/stream-array&quot;&gt;streamArray&lt;/a&gt;: Taking the array of &lt;code&gt;posts&lt;/code&gt; we’ve created and feeding that into Node&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.npmjs.com/package/vinyl&quot;&gt;Vinyl&lt;/a&gt;: A library created by the gulp.js team for creating files within a gulp.js task&lt;/li&gt;&lt;/ul&gt;&lt;pre&gt;&lt;code&gt;const streamArray = require(&#39;stream-array&#39;);
const File = require(&#39;vinyl&#39;);

// gulp.task(&#39;ghost&#39;...

  // Iterate over posts
  const files = posts.map(post =&amp;gt; {

    // Getting some values from the post object
    const { published_at, slug, title } = post;

    // Take a single post and create a new file
    return new File({

      // Name the file based on the post date
      // and the slug
      path: `${published_at.slice(0,10)}-${slug}.md`,

      // Write the title of the post
      // inside the file
      contents: Buffer.from(title)
    });
  });

  // Stream the array of file instances into Node
  return streamArray(files)

    // Put the files in a &#39;_posts&#39; directory
    .pipe(gulp.dest(&#39;./_posts&#39;));
});&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I’ve done my best to explain it in the comments. Note that we’re using the published date and slug of each post to construct the filename and placing them in a &lt;code&gt;/_posts&lt;/code&gt; directory, which follows &lt;a href=&quot;https://jekyllrb.com/docs/posts/#creating-posts&quot;&gt;Jekyll’s post filename format&lt;/a&gt;. The &lt;code&gt;.slice(0,10)&lt;/code&gt; is to remove the time from the full date string.&lt;/p&gt;&lt;h3 id=&quot;create-frontmatter-and-markdown&quot;&gt;Create frontmatter and markdown&lt;/h3&gt;&lt;p&gt;The final part to this &lt;code&gt;gulpfile.js&lt;/code&gt; task is taking the Ghost post data and formatting it in such a way that Jekyll will read it as a typical markdown post. Again, dependencies to the rescue!&lt;/p&gt;&lt;p&gt;Here we’re using template strings to construct the format of our markdown files, and then use &lt;a href=&quot;https://www.npmjs.com/package/handlebars&quot;&gt;handlebars&lt;/a&gt; to transform the variables into the values we want. We could just use regular JavaScript to put the data straight into the template, but this a bit easier to read and could be extended upon without overly complex template strings.&lt;/p&gt;&lt;pre&gt;&lt;code&gt;const Handlebars = require(&#39;handlebars&#39;);

// Create markdown template
// using handlebars templating
// (No indentation so it doesn&#39;t appear in the file)
const template = `
---
title: {{ title }}
excerpt: {{{ excerpt }}}
feature_image: {{ feature_image }}
tags:
{{#each tags}}
- {{ this.slug }}
{{/each}}
---
{{{ html }}}
`;

// Create a compiler function
// with the library and template string
const templateFunction = Handlebars.compile(template.trim());

// gulp.task(&#39;ghost&#39;...

      // Pass the post to the template function and
      // in turn pass it to the content of the file
      contents: Buffer.from(templateFunction(post))
    });
  });

  // streamArray...&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Another plus to using handlebars here is that it mirrors the &lt;a href=&quot;https://shopify.github.io/liquid/&quot;&gt;Liquid templating&lt;/a&gt; language used in Jekyll, so anyone familiar with working on the project may have an easier time making edits and additions.&lt;/p&gt;&lt;p&gt;The template string I’ve used is more of an example, just exposing things like &lt;code&gt;title&lt;/code&gt;, &lt;code&gt;tags&lt;/code&gt;, &lt;code&gt;html&lt;/code&gt; (the main content) etc. If you want to expose more of the Ghost API to your Jekyll site, like post attributes and other endpoints, you can &lt;a href=&quot;https://ghost.org/docs/api/v2/content/#endpoints&quot;&gt;check out the Ghost docs&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;all-together-now-&quot;&gt;All together now!&lt;/h2&gt;&lt;figure class=&quot;kg-card kg-bookmark-card&quot;&gt;&lt;a class=&quot;kg-bookmark-container&quot; href=&quot;https://gist.github.com/daviddarnes/eb956c1a8b57f4249ea57516b06ca89e&quot;&gt;&lt;div class=&quot;kg-bookmark-content&quot;&gt;&lt;div class=&quot;kg-bookmark-title&quot;&gt;Import your Ghost posts into a Jekyll project using Gulp&lt;/div&gt;&lt;div class=&quot;kg-bookmark-description&quot;&gt;Import your Ghost posts into a Jekyll project using Gulp - gulpfile.js&lt;/div&gt;&lt;div class=&quot;kg-bookmark-metadata&quot;&gt;&lt;img class=&quot;kg-bookmark-icon&quot; src=&quot;https://github.githubassets.com/favicon.ico&quot; /&gt;&lt;span class=&quot;kg-bookmark-author&quot;&gt;Gist&lt;/span&gt;&lt;span class=&quot;kg-bookmark-publisher&quot;&gt;262588213843476&lt;/span&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;kg-bookmark-thumbnail&quot;&gt;&lt;img src=&quot;https://github.githubassets.com/images/modules/gists/gist-og-image.png&quot; /&gt;&lt;/div&gt;&lt;/a&gt;&lt;/figure&gt;&lt;p&gt;If you &lt;a href=&quot;https://gist.github.com/daviddarnes/eb956c1a8b57f4249ea57516b06ca89e&quot;&gt;click through to the gist&lt;/a&gt; you’ll see that I’ve added a &lt;code&gt;package.json&lt;/code&gt; that you can easily copy too.&lt;/p&gt;&lt;p&gt;Pretty nifty method of bringing Ghost and Jekyll together I think. Feel free to &lt;a href=&quot;https://twitter.com/DavidDarnes&quot;&gt;chat with me on Twitter&lt;/a&gt; if you’ve got some improvements or are using this yourself!&lt;/p&gt;&lt;p&gt;PS. Thanks to &lt;a href=&quot;https://twitter.com/philhawksworth&quot;&gt;Phil&lt;/a&gt; for giving me the inspiration, and thanks to &lt;a href=&quot;https://twitter.com/allouis_&quot;&gt;egg&lt;/a&gt; for the refactoring and code review&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Eleventy and Ghost</title>
    <link>https://darn.es/eleventy-and-ghost/
    <updated>2021-09-08T15:36:03.000+00:00</updated>
    <id>https://darn.es/eleventy-and-ghost/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://ghost.org/changelog/eleventy/">Eleventy and Ghost</a></p>
        <pre>https://ghost.org/changelog/eleventy/</pre>

    </content>
  </entry>
  <entry>
    <title>Use Eleventy to generate a Ghost blog</title>
    <link>https://darn.es/use-eleventy-to-generate-a-ghost-blog/
    <updated>2021-09-05T12:29:02.000+00:00</updated>
    <id>https://darn.es/use-eleventy-to-generate-a-ghost-blog/</id>
    <content type="html">

        &lt;p&gt;Eleventy is swiftly becoming the most popular static site generator within my online feeds. &lt;a href=&quot;https://www.11ty.io/&quot;&gt;Check out the site&lt;/a&gt; if you want to know more. If you’re a fan of Jekyll, you’ll probably like Eleventy just as much…maybe more.&lt;/p&gt;&lt;p&gt;Last night, I had a thought, which was only perpetuated by &lt;a href=&quot;https://mobile.twitter.com/andybelldesign/status/1134565751074037774&quot;&gt;Andy&lt;/a&gt;:&lt;/p&gt;&lt;blockquote&gt;What if I could source a &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt; blog from the &lt;a href=&quot;https://docs.ghost.org/api/content/&quot;&gt;Ghost Content API&lt;/a&gt; and then generate a static blog, all inside of Eleventy?&lt;/blockquote&gt;&lt;h2 id=&quot;preface&quot;&gt;Preface&lt;/h2&gt;&lt;p&gt;You’re going to need Eleventy installed for this in some shape or form - &lt;a href=&quot;https://www.11ty.io/docs/&quot;&gt;check out the docs&lt;/a&gt; to get setup.&lt;/p&gt;&lt;h2 id=&quot;data-sourcing&quot;&gt;Data sourcing&lt;/h2&gt;&lt;p&gt;Creating and getting data in Eleventy builds upon the method that Jekyll already uses. A &lt;code&gt;_data/&lt;/code&gt; directory is where you can store chunks of data that are then exposed in your template files. &lt;a href=&quot;https://www.11ty.io/docs/data/&quot;&gt;Eleventy takes this one step further, though&lt;/a&gt;, with the ability to use JavaScript files to source and create data structures.&lt;/p&gt;&lt;p&gt;I guess, if we can use JavaScript, then we can probably use some libraries, too? Let’s have a go by installing the &lt;a href=&quot;https://docs.ghost.org/api/javascript/&quot;&gt;Ghost Content API Client Library&lt;/a&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;npm install @tryghost/content-api --save-dev
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Then a data file - in this case, the file is called &lt;code&gt;_data/posts.js&lt;/code&gt;:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;// The library that was just installed
const contentAPI = require(&#39;@tryghost/content-api&#39;);

// New instance with Ghost demo API credentials
const api = new contentAPI({
  url: &#39;https://demo.ghost.io&#39;,
  key: &#39;22444f78447824223cefc48062&#39;,
  version: &#39;v2&#39;
});

// Export data called from the API
module.exports = async function() {
  return api.posts.browse()
      .catch((err) =&amp;gt; {
          console.error(err);
      });
}
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&quot;templating&quot;&gt;Templating&lt;/h2&gt;&lt;p&gt;This clever API code is all well and good, but you’re not going to see anything without some template files to present content. I’ve provided a very raw example below using nunjucks templating, called &lt;code&gt;index.njk&lt;/code&gt;. Note that the variable &lt;code&gt;posts&lt;/code&gt; is the same as the name given to the data file. This is part of how Eleventy passes that data to the template files:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;&amp;lt;ul&amp;gt;
  {% for post in posts %}
    &amp;lt;li&amp;gt;
       &amp;lt;a href=&quot;/posts/{{ post.slug }}/&quot;&amp;gt;
         {{ post.title }}
       &amp;lt;/a&amp;gt;
    &amp;lt;/li&amp;gt;
  {% endfor %}
&amp;lt;/ul&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let’s run Eleventy with &lt;code&gt;eleventy --serve&lt;/code&gt; and see what happens:&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/post-list.png&quot; class=&quot;kg-image&quot; alt=&quot;Unformatted list of linked post titles&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;What a beautifully designed blog ??. Joking aside, it worked! We sourced content directly from the Ghost API and generated a little static blog with Eleventy! ??&lt;/p&gt;&lt;h2 id=&quot;rendering-single-posts&quot;&gt;Rendering single posts&lt;/h2&gt;&lt;p&gt;This blog isn’t quite a blog, though; we’re linking each post to an optimistic, but disappointing, 404 page. I guess we could link to the original post on a Ghost site, but that’s not a real static blog, right?&lt;/p&gt;&lt;p&gt;Oddly, this part of my personal challenge was what I got stuck on the most. The creation of single pages for chunks of content is &lt;a href=&quot;https://www.11ty.io/docs/pagination/#paging-an-object&quot;&gt;wrapped up in ‘Pagination’&lt;/a&gt;. On the face of it, this sounds weird. Why would I want to use pagination, something that creates groups of things, to create the one thing?&lt;/p&gt;&lt;p&gt;If you think about it though, it’s not that far off. Pagination is where you split a long array of items into smaller chunks. Well, what if you wanted to split those chunks to a small enough size that each page was just one thing? That’s pretty much what we want: a single page with one item on each.&lt;/p&gt;&lt;p&gt;Again, we’re going to use nunjucks for templating, but enlist some frontmatter to configure our pagination:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;---
pagination:
  data: posts
  size: 1
  alias: post
permalink: posts/{{ post.slug }}/
---
&amp;lt;h1&amp;gt;{{ post.title }}&amp;lt;/h1&amp;gt;
{{ post.html | safe }}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Let’s break it down…&lt;/p&gt;&lt;ul&gt;&lt;li&gt;We’re using the &lt;code&gt;pagination&lt;/code&gt; option&lt;/li&gt;&lt;li&gt;The &lt;code&gt;data&lt;/code&gt; we want to use is &lt;code&gt;posts&lt;/code&gt;&lt;/li&gt;&lt;li&gt;The &lt;code&gt;size&lt;/code&gt; of the pagination chunk is just &lt;code&gt;1&lt;/code&gt; post&lt;/li&gt;&lt;li&gt;Providing an &lt;code&gt;alias&lt;/code&gt; key name called &lt;code&gt;post&lt;/code&gt;, better to deal with the singular in this context, rather than a plural key&lt;/li&gt;&lt;li&gt;Finally, the &lt;code&gt;permalink&lt;/code&gt; option is to tell Eleventy to output each post to a path matching the post slug.&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;I’ve called this file &lt;code&gt;post.njk&lt;/code&gt;, but since it’s never outputted, it doesn’t really matter.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/file-directory.png&quot; class=&quot;kg-image&quot; alt=&quot;All the post files generated, as well as the project files&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/example-post.png&quot; class=&quot;kg-image&quot; alt=&quot;Example post in the browser&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;We’re done! An Eleventy static site sourcing content from the Ghost API.&lt;/p&gt;&lt;p&gt;This doesn’t just work for the Ghost API. With the JavaScript fetch API, we can pull in content from all sorts of places.&lt;/p&gt;&lt;p&gt;How about all your repos on GitHub?&lt;/p&gt;&lt;pre&gt;&lt;code&gt;const fetch = require(&quot;node-fetch&quot;);

module.exports = async function() {
  const data = await fetch(&#39;https://api.github.com/users/daviddarnes/repos&#39;);
  const json = await data.json().then(data =&amp;gt; data);
  return json;
};
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This feature alone makes Eleventy a really powerful tool. Have a play and &lt;a href=&quot;https://twitter.com/daviddarnes&quot;&gt;let me know what you make with it&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>5 excellent examples of progressive web applications</title>
    <link>https://darn.es/examples-of-progressive-web-applications/
    <updated>2020-03-08T19:31:35.000+00:00</updated>
    <id>https://darn.es/examples-of-progressive-web-applications/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://simpleweb.co.uk/5-excellent-examples-of-progressive-web-applications/">5 excellent examples of progressive web applications</a></p>
        <pre>https://simpleweb.co.uk/5-excellent-examples-of-progressive-web-applications/</pre>

    </content>
  </entry>
  <entry>
    <title>Experiments in augmented reality with Apple’s ARKit</title>
    <link>https://darn.es/experiments-in-augmented-reality/
    <updated>2020-03-08T19:31:52.000+00:00</updated>
    <id>https://darn.es/experiments-in-augmented-reality/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://simpleweb.co.uk/experiments-in-augmented-reality-with-apples-arkit/">Experiments in augmented reality with Apple’s ARKit</a></p>
        <pre>https://simpleweb.co.uk/experiments-in-augmented-reality-with-apples-arkit/</pre>

    </content>
  </entry>
  <entry>
    <title>Coding a festive puzzle game with modern front-end techniques</title>
    <link>https://darn.es/coding-a-festive-puzzle-game-with-modern-front-end-techniques/
    <updated>2020-03-08T19:32:44.000+00:00</updated>
    <id>https://darn.es/coding-a-festive-puzzle-game-with-modern-front-end-techniques/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://simpleweb.co.uk/coding-a-festive-puzzle-game-with-modern-front-end-techniques/">Coding a festive puzzle game with modern front-end techniques</a></p>
        <pre>https://simpleweb.co.uk/coding-a-festive-puzzle-game-with-modern-front-end-techniques/</pre>

    </content>
  </entry>
  <entry>
    <title>5 tips for a happier front-end Development Team</title>
    <link>https://darn.es/5-tips-for-a-happier-front-end-development-team/
    <updated>2020-03-08T19:33:02.000+00:00</updated>
    <id>https://darn.es/5-tips-for-a-happier-front-end-development-team/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://simpleweb.co.uk/5-tips-for-a-happier-front-end-development-team/">5 tips for a happier front-end Development Team</a></p>
        <pre>https://simpleweb.co.uk/5-tips-for-a-happier-front-end-development-team/</pre>

    </content>
  </entry>
  <entry>
    <title>Dropping the mic on Netlify in 20 minutes</title>
    <link>https://darn.es/dropping-the-mic-on-netlify/
    <updated>2020-03-08T14:57:10.000+00:00</updated>
    <id>https://darn.es/dropping-the-mic-on-netlify/</id>
    <content type="html">

        &lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/mic-drop.gif&quot; class=&quot;kg-image&quot; alt=&quot;Mic drop on https://mic-drop.netlify.com&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Alright, so I didn’t actually drop the mic on Netlify; I dropped a site on it. &lt;a href=&quot;https://netlify.com/drop&quot;&gt;Netlify Drop&lt;/a&gt; is a tool where you can grab a folder containing a site or app or whatever and drop it straight into the Netlify hosting platform. You can &lt;a href=&quot;https://www.netlify.com/blog/2018/08/14/announcing-netlify-drop---the-simplicity-of-bitballoon-with-the-added-power-of-netlify/&quot;&gt;read more about Drop&lt;/a&gt; on the Netlify blog.&lt;/p&gt;&lt;p&gt;Anyway, I saw their announcement and thought…&lt;/p&gt;&lt;p&gt;Hmm I really want to try this out, but what should I make?&lt;/p&gt;&lt;p&gt;And then it clicked… well, thudded - with a little audio feedback.&lt;/p&gt;&lt;h2 id=&quot;let-s-begin&quot;&gt;Let’s begin&lt;/h2&gt;&lt;p&gt;I started in a place where I often go to code obscure, but fun things: &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;. Kicking things off with a bit of HTML:&lt;/p&gt;&lt;p&gt;So, I’ve got a mic and a hand to hold it neatly (if a little inaccessibly) wrapped in some &lt;code&gt;span&lt;/code&gt; elements, but I need to sort out the presentation. There’s a set of styles that I almost always use when knocking together that needs to be front-and-centre, which is why I should probably throw these into a &lt;a href=&quot;https://blog.codepen.io/2018/05/24/a-new-create-menu-and-unlimited-pen-templates/&quot;&gt;CodePen template&lt;/a&gt;, so I don’t have to write them every time:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;body {
  min-height: 100vh;
  display: grid;
  place-items: center;
  font-size: 10vw;
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;What’s going on in the above CSS? Well, I’m selecting the body element and giving it a height of at least 100% of the browser height (viewport height, &lt;code&gt;vh&lt;/code&gt;). Then, I’m harnessing the power of CSS Grid to centre any child elements within the body. I love the &lt;code&gt;place-items&lt;/code&gt; shorthand property for centering grid items - totally stole that from &lt;a href=&quot;https://twitter.com/bdc/status/877553112772423681&quot;&gt;a tweet by Benjamin De Cock&lt;/a&gt;. The last bit is a flippant attempt to scale the emojis with &lt;code&gt;font-size&lt;/code&gt; in relation to the browser width (viewport width, &lt;code&gt;vw&lt;/code&gt;).&lt;/p&gt;&lt;p&gt;These styles aren’t going to get the desired result, however. I need the hand to overlap the mic and rotate it a little to give the impression that it’s holding the mic:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;span {
  grid-area: 1 / 1;
}

.hand {
  cursor: pointer;
  transform: rotate(-38deg) translateX(-20%) translateY(1%);
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In this part of the CSS, I’m using &lt;code&gt;grid-area&lt;/code&gt; to place the hand and the mic in the same grid cell; it’s an excellent trick to overlap elements without using absolute positioning. That’s another one I stole from someone, but this time it was in the &lt;a href=&quot;https://cssgrid.io/&quot;&gt;CSS Grid course by Wes Bos&lt;/a&gt;. Lastly, shown above are a few adjustments to the hand with some &lt;code&gt;transform&lt;/code&gt; styles, as well as making sure the cursor pointer comes up when someone hovers over the hand (bad Dave! Very inaccessible).&lt;/p&gt;&lt;h2 id=&quot;dropping-the-mic&quot;&gt;Dropping the mic&lt;/h2&gt;&lt;p&gt;Now, how to make this mic drop off the screen? For this, I’m going to employ the use of CSS custom properties:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;.mic {
  transition: 1s ease-in;
  transform: translateY(var(--drop, 0)) rotate(var(--spin, 0deg));
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;With these styles, the &lt;code&gt;.mic&lt;/code&gt; (the mic ??) will look no different and won’t do anything. However, it’s ready to take onboard two custom properties, &lt;code&gt;--drop&lt;/code&gt; and &lt;code&gt;--spin&lt;/code&gt;. These custom properties have also been setup with defaults to make sure they have a starting point: &lt;code&gt;var(--drop, 0)&lt;/code&gt; for the Y translation (moving downwards) and &lt;code&gt;var(--spin, 0deg)&lt;/code&gt; for rotation (in degrees). The other property is to tell the element to transition between states, so the mic will move whenever I give it any property change, custom or not.&lt;/p&gt;&lt;h2 id=&quot;listening-for-the-cue&quot;&gt;Listening for the cue&lt;/h2&gt;&lt;p&gt;As the mic has been prepared for my two custom properties, I can now apply them when someone clicks on the hand with a bit of JavaScript:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;document.querySelector(&#39;.hand&#39;).addEventListener(&#39;click&#39;, event =&amp;gt; {
  event.target.innerHTML = `?`
  document.querySelector(&#39;.mic&#39;).style = `--drop: 60vh; --spin: 900deg`
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I’ve got a habit of writing short, but sometimes hard to read JavaScript, so maybe this will help you understand what I’m doing:&lt;/p&gt;&lt;pre&gt;&lt;code&gt;const hand = document.querySelector(&#39;.hand&#39;);
const mic = document.querySelector(&#39;.mic&#39;);

hand.addEventListener(&#39;click&#39;, () =&amp;gt; {
  hand.innerHTML = `?`
  mic.style = `--drop: 60vh; --spin: 900deg`
})
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;In the cleaner presentation above, I’m selecting both the hand and mic &lt;code&gt;span&lt;/code&gt; elements and naming them, respectively. To the hand I’m adding an event listener, so I know when a &lt;code&gt;click&lt;/code&gt; happens on it. Two things will then happen when the hand is clicked:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;The content of the hand &lt;code&gt;span&lt;/code&gt; will be changed to an open hand ?&lt;/li&gt;&lt;li&gt;A &lt;code&gt;style&lt;/code&gt; attribute will be added to the mic &lt;code&gt;span&lt;/code&gt; with a value that contains new values for my custom CSS properties, &lt;code&gt;--drop: 60vh&lt;/code&gt; and &lt;code&gt;--spin: 900deg&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;With this in place, the hand will ‘open’ and the mic will drop down 60vh (60% of the viewport browser height) and spin 900 degrees. I realise now that 900 degrees for a mic to spin after someone dropping it is a bit excessive, unless it was &lt;a href=&quot;https://www.youtube.com/watch?v=UnDgQUW1CO0&quot;&gt;Tony Hawk dropping it&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;the-result&quot;&gt;The result&lt;/h2&gt;&lt;p&gt;The final slot of the puzzle was using what I mentioned at the start, &lt;a href=&quot;https://netlify.com/drop&quot;&gt;Netlify Drop&lt;/a&gt;:&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/drop.gif&quot; class=&quot;kg-image&quot; alt=&quot;Dropping a folder onto Netlify Drop&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;&lt;strong&gt;You can find the final resulting hosted site at &lt;a href=&quot;https://mic-drop.netlify.com/&quot;&gt;https://mic-drop.netlify.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;This was really fun to make, and thanks to all these great tools and development features, it only took 20 minutes or so to complete. There have been &lt;a href=&quot;https://twitter.com/Netlify/status/1029662360192069632&quot;&gt;so many people responding to it on Twitter&lt;/a&gt; and it’s &lt;a href=&quot;https://twitter.com/dataandme/status/1029802654720045056&quot;&gt;great to see&lt;/a&gt; &lt;a href=&quot;https://twitter.com/philhawksworth/status/1029669405146472448&quot;&gt;people enjoying it&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/DavidWells/status/1029891166219591680&quot;&gt;having a laugh&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;to-do&quot;&gt;To do&lt;/h2&gt;&lt;p&gt;This subheading sounds ominous, as if I’m going to make it into some kind of SaaS product or something. Well, I can tell you now, that’s not &lt;em&gt;my plan&lt;/em&gt; - I want to use it for learning purposes. There are some things I want to try out which include a couple of the other useful features Netlify provides. Here’s what I’m thinking:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;?? &lt;strong&gt;Stop the mic spinning so much&lt;/strong&gt;: the mic is dropping, not dancing&lt;/li&gt;&lt;li&gt;?? Make sure the &lt;strong&gt;mic is in front of the open hand&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;?? &lt;strong&gt;Fix the bug on iOS Safari&lt;/strong&gt;: browser height is changing and &lt;code&gt;vh&lt;/code&gt; tries to keep up. Sadly, Safari iOS is pretty bad at this and there &lt;a href=&quot;https://medium.com/samsung-internet-dev/toolbars-keyboards-and-the-viewports-10abcc6c3769#e8fd&quot;&gt;has been quite a bit of work to work around the bug&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;strong&gt;Use a Lambda function to log every mic drop&lt;/strong&gt; that happens on the site and show it as a rolling tally. &lt;a href=&quot;https://www.netlify.com/features/#add-ons&quot;&gt;Netlify has this as one of it’s backend features&lt;/a&gt;&lt;/li&gt;&lt;li&gt;?? Allow repeatable ‘drops’ to give people the extra satisfaction&lt;/li&gt;&lt;li&gt;?? A query string of some kind on the url, so that the mic automatically drops whenever someone opens the link - to give &lt;em&gt;other people&lt;/em&gt; the satisfaction&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Update: the items marked&lt;/em&gt; ?? &lt;em&gt;I’ve now done&lt;/em&gt;&lt;/p&gt;&lt;p&gt;Alright, I think that’s everything. I’ve gone on for too long now. Thanks for reading! If you liked this, then &lt;a href=&quot;https://twitter.com/home?status=Dropping%20the%20mic%20on%20%40Netlify%20in%2020%20minutes%20https%3A//david.darn.es/2018/08/16/dropping-the-mic-on-netlify/%20by%20%40DavidDarnes&quot;&gt;feel free to share it&lt;/a&gt; or &lt;a href=&quot;https://twitter.com/DavidDarnes&quot;&gt;send me a nice tweet&lt;/a&gt;.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Making your first Jekyll theme: Part 2</title>
    <link>https://darn.es/making-your-first-jekyll-theme-part-2/
    <updated>2020-03-08T14:57:56.000+00:00</updated>
    <id>https://darn.es/making-your-first-jekyll-theme-part-2/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://www.siteleaf.com/blog/making-your-first-jekyll-theme-part-2/">Making your first Jekyll theme: Part 2</a></p>
        <pre>https://www.siteleaf.com/blog/making-your-first-jekyll-theme-part-2/</pre>

    </content>
  </entry>
  <entry>
    <title>Making your first Jekyll theme: Part 1</title>
    <link>https://darn.es/making-your-first-jekyll-theme-part-1/
    <updated>2020-03-08T15:04:59.000+00:00</updated>
    <id>https://darn.es/making-your-first-jekyll-theme-part-1/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://www.siteleaf.com/blog/making-your-first-jekyll-theme-part-1/">Making your first Jekyll theme: Part 1</a></p>
        <pre>https://www.siteleaf.com/blog/making-your-first-jekyll-theme-part-1/</pre>

    </content>
  </entry>
  <entry>
    <title>Adding heading links to your Jekyll blog</title>
    <link>https://darn.es/adding-heading-links-to-your-jekyll-blog/
    <updated>2020-03-08T15:08:21.000+00:00</updated>
    <id>https://darn.es/adding-heading-links-to-your-jekyll-blog/</id>
    <content type="html">

        &lt;p&gt;I just spent the last hour or so fiddling around with my blog and portfolio. Both of them I thought could do with larger type to improve legibility and to give more of an impact.&lt;/p&gt;&lt;p&gt;One of the convenient things Jekyll does out of the box is add &lt;code&gt;id&lt;/code&gt; attributes to headings generated with markdown in posts and pages. This means that people can link to a specific section on a page, but the only way to get the id for the link is to inspect the page and find the heading id.&lt;/p&gt;&lt;p&gt;Wouldn’t it be cool if there was a link next to the heading so you could link to that section more easily? ??&lt;/p&gt;&lt;h2 id=&quot;how-to-add-a-heading-link&quot;&gt;How to add a heading link&lt;/h2&gt;&lt;p&gt;I realise this type of trick has been done a few times with ever so slightly different syntax, but here is my spin on the whole thing:&lt;/p&gt;&lt;pre&gt;&lt;code class=&quot;language-js&quot;&gt;const headings = document.querySelectorAll(&#39;h2[id],h3[id]&#39;); // 1
const linkContent = &#39;??&#39;; // 2
for (const heading of headings) { // 3
    const linkIcon = document.createElement(&#39;a&#39;); // 4
    linkIcon.setAttribute(&#39;href&#39;, `#${heading.id}`); // 5
    linkIcon.innerHTML = linkContent; // 6
    heading.appendChild(linkIcon); // 7
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;I’ve marked each line of the code with a number that corresponds to the steps below:&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Grab all the headings you want to link (h1 to h6)&lt;/li&gt;&lt;li&gt;Choose a nice icon or piece of html for your link icon&lt;/li&gt;&lt;li&gt;For each heading in your group of headings…&lt;/li&gt;&lt;li&gt;Create an anchor element&lt;/li&gt;&lt;li&gt;Add the heading id as the anchor link&lt;/li&gt;&lt;li&gt;Add your icon or html to the anchor&lt;/li&gt;&lt;li&gt;Add it to the heading (appended after the heading text content)&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;I hope I’ve explained this well enough. I’m sure this script is quite trivial, but I always find it useful when people explain what the code is doing, so you can either take it as is or manipulate it to your needs.&lt;/p&gt;&lt;p&gt;Now that space on the left of my blog posts isn’t such a waste of space anymore.&lt;/p&gt;&lt;p&gt;Hope you find this useful.&lt;/p&gt;&lt;p&gt;??&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>What do we look for in a CMS?</title>
    <link>https://darn.es/what-do-we-look-for-in-a-cms/
    <updated>2020-03-08T19:33:24.000+00:00</updated>
    <id>https://darn.es/what-do-we-look-for-in-a-cms/</id>
    <content type="html">

        &lt;p&gt;Back in March 2015, I attempted to build &lt;a href=&quot;https://bread.li/&quot;&gt;Bread.li&lt;/a&gt;, a site dedicated to providing valuable information on a wide range of CMS’s. Without going into too much detail, I failed to complete it and now it’s a half baked project ??&lt;/p&gt;&lt;p&gt;So, what went wrong? Well, I think it’s down to where I started. I began with the build, rather than the purpose of the site, which is something that often happens when we pick a CMS. &lt;strong&gt;We look at the development benefits over how the CMS will be actually used.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Allow me to start this side project reboot on the right footing with a better proposal: &lt;strong&gt;what should we look for in a CMS?&lt;/strong&gt; I posed &lt;a href=&quot;https://daviddarnes.typeform.com/to/V0w4FE&quot;&gt;this question&lt;/a&gt; in &lt;a href=&quot;https://twitter.com/DavidDarnes/status/822777330414272513&quot;&gt;several forms&lt;/a&gt; on Twitter to get feedback from the community. After some consideration, polls and great discussion, I came up with a list of aspects that people consider when looking for a CMS. Bear in mind, &lt;strong&gt;this isn’t a definitive list&lt;/strong&gt;; there are things missing and some may not be in the order that they &lt;em&gt;should&lt;/em&gt; be in, so feel free to send me a tweet with your thoughts.&lt;/p&gt;&lt;p&gt;In priority order:&lt;/p&gt;&lt;h2 id=&quot;1-does-it-fit-the-client-s-requirements&quot;&gt;1. Does it fit the client’s requirements?&lt;/h2&gt;&lt;p&gt;Seems obvious, but it doesn’t actually feel like people consider this when they begin working with a new client. Often, our good old friend &lt;a href=&quot;https://wordpress.org/&quot;&gt;WordPress&lt;/a&gt; will fit 90% of cases and we then never break away from that. I’m glad this came out as number 1 as it allows me to explain the two sides I see with fitting the clients needs.&lt;/p&gt;&lt;p&gt;On one hand, we have a specific type of content to deliver, whether those are pages, blog posts or just a single page with an address on it. On the other hand, we have a client that needs something to handle (a.k.a. “manage”) said content. When I consider these two sides, I think of the blogging platform &lt;a href=&quot;https://ghost.org/&quot;&gt;Ghost&lt;/a&gt;, because it’s designed to &lt;em&gt;deliver&lt;/em&gt; blog post content and the admin UI is designed to &lt;em&gt;handle&lt;/em&gt; blog content.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/ghost-admin.jpg&quot; class=&quot;kg-image&quot; alt=&quot;Ghost&#39;s admin UI and resulting post&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;h2 id=&quot;2-is-there-good-documentation&quot;&gt;2. Is there good documentation?&lt;/h2&gt;&lt;p&gt;This point came up higher than I expected. From my experience of developing the &lt;a href=&quot;https://docs.anchorcms.com/&quot;&gt;Anchor CMS documentation&lt;/a&gt;, I know that poor documentation can turn away a developer almost immediately. An undocumented piece of code might stop a developer using a feature, which in turn means they can’t provide it for the client.&lt;/p&gt;&lt;p&gt;However, it’s too easy to get blinkered by this aspect. A thriving development community doesn’t necessarily mean the CMS is the best for your client. Look for &lt;strong&gt;good&lt;/strong&gt; documentation, not &lt;em&gt;perfect&lt;/em&gt;. Don’t forget, adding to the documentation is always a good way to contribute to that community.&lt;/p&gt;&lt;h2 id=&quot;3-is-the-ui-easy-to-understand-use&quot;&gt;3. Is the UI easy to understand &amp;amp; use?&lt;/h2&gt;&lt;p&gt;Personally, I feel like this point is more important than extensive documentation. A good UI to edit content is pretty much the whole reason we use a CMS so that our clients can understand and use what we have built for them. The CMS interface is the translator that sits between the client and the raw data.&lt;/p&gt;&lt;p&gt;I’ve seen many cases where this aspect has been considered &lt;em&gt;after&lt;/em&gt; most of the CMS has been built. This is then reflected when the CMS has been presented to the developer, where the implementation method and technical features are promoted over the usability.&lt;/p&gt;&lt;p&gt;It’s wise to spend some time researching the interface. Try a demo for yourself or even give one to your client to try out.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/anchor-cms-header.jpg&quot; class=&quot;kg-image&quot; alt=&quot;Anchor CMS header&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;The screenshot above is of the Anchor CMS header bar, which shows quite a few options, but are clearly labelled and aren’t as cluttered as other admin navigations.&lt;/p&gt;&lt;h2 id=&quot;4-does-it-have-good-performance&quot;&gt;4. Does it have good performance?&lt;/h2&gt;&lt;p&gt;Having a performant CMS is a somewhat overlooked aspect. To be honest, I haven’t considered it much in the past. Having a fast performing customer facing site is important and something I like to work on, but what about a performant admin interface?&lt;/p&gt;&lt;p&gt;A good CMS can meet this requirement on two accounts: using the right templating language and caching methods can result in good site speeds, and a fast serving admin interface can make the client feel more confident in editing their site. I know this has been a strong reason for &lt;a href=&quot;https://grabaperch.com/vs/wordpress&quot;&gt;people to choose Perch&lt;/a&gt; over other CMS’s.&lt;/p&gt;&lt;h2 id=&quot;5-does-the-cost-fit-the-budget&quot;&gt;5. Does the cost fit the budget?&lt;/h2&gt;&lt;p&gt;I’m kind of glad to see this point low on the list. Of course the client will have a budget in mind for the site and you’ll need to fit the cost of the CMS into that, but we’re not limited to just the free CMS’s on the market. Again, this is another reason why people end up using WordPress.&lt;/p&gt;&lt;p&gt;There are other options, though. I haven’t tried it myself, but I’ve heard really good things about &lt;a href=&quot;https://craftcms.com/&quot;&gt;Craft&lt;/a&gt;, which for a small price offers a very flexible and friendly user interface for clients to easily edit and add content.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/craft-admin.jpg&quot; class=&quot;kg-image&quot; alt=&quot;Craft&#39;s admin UI&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;h2 id=&quot;6-what-platform-is-it-built-on&quot;&gt;6. What platform is it built on?&lt;/h2&gt;&lt;p&gt;I guess asking about the platform of the CMS is more related to what languages you are familiar with. If you know a decent amount of PHP then, again, WordPress is probably your best friend. Although, what other factors could steer you towards another underlying language?&lt;/p&gt;&lt;p&gt;Maybe the client has an API that’s designed to be interacted with via node.js? It could even be a headless CMS, that needs to interact with several platforms all at once. An example of this would be &lt;a href=&quot;https://gathercontent.com/&quot;&gt;GatherContent&lt;/a&gt;, as it has a &lt;a href=&quot;https://gathercontent.com/integrations&quot;&gt;wide array of integrations&lt;/a&gt; that allow you to connect with a range of CMS’s and platforms.&lt;/p&gt;&lt;h2 id=&quot;why-are-we-missing-these-points&quot;&gt;Why are we missing these points?&lt;/h2&gt;&lt;p&gt;I &lt;em&gt;could&lt;/em&gt; make a few assumptions about these points that we might be making: we play it safe with our familiar choices; we won’t spend money on something we can get for free; it doesn’t fit the development stack etc. However, I won’t go into this now.&lt;/p&gt;&lt;p&gt;What I will say is that we should open our minds to the CMS landscape. Take a look at the competition or other options you might think will work better for your client… &lt;strong&gt;play the field a bit&lt;/strong&gt;. It might be the only chance you get. I certainly wish I had the time to try them all.&lt;/p&gt;&lt;p&gt;I hope you found this article useful. As I said above, feel free &lt;a href=&quot;https://twitter.com/daviddarnes&quot;&gt;to tweet me&lt;/a&gt; with your thoughts and share what you think it a good reason to try a different CMS.&lt;/p&gt;&lt;p&gt;??&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>My worst job interview</title>
    <link>https://darn.es/my-worst-job-interview/
    <updated>2020-03-08T19:33:43.000+00:00</updated>
    <id>https://darn.es/my-worst-job-interview/</id>
    <content type="html">

        &lt;p&gt;My worst job interview didn’t get me very far; not even into their office. It was just a phone call. It was a brief and kind of upsetting moment in my early career. Allow me to explain why I think this was my worst interview.&lt;/p&gt;&lt;p&gt;Just before I graduated from university, some design agencies in the surrounding area had expressed interest in people who might be looking for work after they’d left. A few representatives from these agencies even came in to chat with people from my course and other design courses. I made my best attempt to chat with as many as I could, even just for a brief moment, to see what they were looking for and to get contact details for them.&lt;/p&gt;&lt;p&gt;Some time passed after this; I’m not sure how much, but not a lot, as I believe I was just rounding off a few things before I packed up to move back in with my Mum. During this time, my results came through for my degree. I was pleased that I had passed, but the result was less than expected. At the time, I was quite upset because I really thought I’d worked hard on my projects. It was a 2.2 - not a bad mark, but I was hoping for better. I decided at the time to only tell people if they asked in an interview.&lt;/p&gt;&lt;p&gt;At the time, I had the mentality of 50% &lt;em&gt;“time to chill out and relax after 3 years hard-ish work”&lt;/em&gt; and 50% &lt;em&gt;“Oh, shit - I’d better get a design job before my Mum makes me fill in this Morrisons application form”&lt;/em&gt;. I’m not even kidding with that last part. My Mum knew it would be hard to get a design job in the area, so anything that would bring in some money was worth going for.&lt;/p&gt;&lt;p&gt;I remember this time kind of fondly because I was naive, but really keen to work in the design industry. I collated all the contacts I’d accumulated, including the ones that had dropped by the university, and began my research on where they were and what they did. Sadly, very few of them had junior positions that I could apply for, but I was hopeful that if I at least made contact, that I might at least get a bite.&lt;/p&gt;&lt;p&gt;At the time, emailing was still a bit iffy; agencies tended to show their phone number over their email address and weren’t so swift to reply if you did email. So, I started calling some of them to introduce myself and to ask if they’d be interested in someone like me. Most of the replies were polite, but unsuccessful…&lt;/p&gt;&lt;p&gt;“Thanks for calling, but we aren’t looking for anyone at the moment.”&lt;/p&gt;&lt;p&gt;or…&lt;/p&gt;&lt;p&gt;“We’re not looking for anyone right now, but feel free to send us your CV.”&lt;/p&gt;&lt;p&gt;For someone who didn’t have &lt;em&gt;any&lt;/em&gt; job prospects at the time, these were crap responses. However, they were at least polite and sometimes promising. Then I made a call to this one agency - one that I had noted down after speaking to a director at my university.&lt;/p&gt;&lt;p&gt;This seemed like a pretty good opportunity, so I decided to give them a call. It was quite a while ago, so I’ll try to remember the conversation the best I can:&lt;/p&gt;&lt;p&gt;“Hi, &lt;em&gt;[Agency]&lt;/em&gt;. &lt;em&gt;[Front Desk]&lt;/em&gt; speaking. How may I help?”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Dave:&lt;/strong&gt; “Hi, my name is David Darnes. I’ve just graduated from university and I was wondering if I could speak to the director about any design roles you may have?”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Front Desk:&lt;/strong&gt; “Oh, right. Let me just check if they are available.”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Dave:&lt;/strong&gt; “Ah, great. Thank you.”&lt;/p&gt;&lt;p&gt;&lt;em&gt;*Hold tone*&lt;/em&gt;&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; “Hello?”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Dave:&lt;/strong&gt; “Hi, there. My name is David Darnes and I’ve just graduated from university. I was wondering if you may have any design roles I could apply for at your agency?”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; “Ah, right. What course did you do?”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Dave:&lt;/strong&gt; “A degree in Interactive Design.”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; “And what grade did you get?”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Dave:&lt;/strong&gt; “Err…” &lt;em&gt;*Slight hesitation*&lt;/em&gt; “a 2.2.”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; “Do you think that is good enough?”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Dave:&lt;/strong&gt; &lt;em&gt;*Longer hesitation*&lt;/em&gt; “I guess not, no.”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Director:&lt;/strong&gt; “Well, I guess we know where this conversation is going.”&lt;/p&gt;&lt;p&gt;&lt;strong&gt;Dave:&lt;/strong&gt; “Oh, okay. Bye, then.”&lt;/p&gt;&lt;p&gt;After that, I hung up as quickly as I could. I think I was in a bit of shock at the time. It was quite upsetting, especially as at the time, I was quite embarrassed about my results. Little did I know that it would mean pretty much nothing when applying for any other jobs after that. However, it seemed to mean a lot to them, or maybe they just wanted to see how I would respond to being challenged in that way?&lt;/p&gt;&lt;p&gt;It didn’t stop me applying though, I continued to contact other agencies before getting my first job a month or two later. Even so, I would class it as one of my worst interviews for a job, if not the worst, as I didn’t even make it past the phone call.&lt;/p&gt;&lt;p&gt;I guess if I was to mention a few take aways from this experience (having looked back on it), I would say that:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;Being a new graduate in this industry can be an upward struggle. If you are one, watch out for challenge questions like this and be prepared to give a good answer&lt;/li&gt;&lt;li&gt;Keep in mind is that interviews work both ways. You may not feel like you’re in the position to be fussy but if you don’t like the sound of them don’t pursue them&lt;/li&gt;&lt;li&gt;If you’re at an agency that’s reviewing applications from newcomers be kind and patient&lt;/li&gt;&lt;li&gt;Grades almost mean nothing now; experience and willingness are a lot more powerful strengths, so give people a chance to show their worth&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;??&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>How to create a Jekyll theme gem</title>
    <link>https://darn.es/how-to-create-and-publish-a-jekyll-theme-gem/
    <updated>2020-03-08T19:34:26.000+00:00</updated>
    <id>https://darn.es/how-to-create-and-publish-a-jekyll-theme-gem/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://webdesign.tutsplus.com/tutorials/how-to-create-and-publish-a-jekyll-theme-gem--cms-27475">How to create a Jekyll theme gem</a></p>
        <pre>https://webdesign.tutsplus.com/tutorials/how-to-create-and-publish-a-jekyll-theme-gem--cms-27475</pre>

    </content>
  </entry>
  <entry>
    <title>Adding Siteleaf to a GitHub Pages site</title>
    <link>https://darn.es/adding-siteleaf-to-a-github-pages-site/
    <updated>2020-03-08T15:23:30.000+00:00</updated>
    <id>https://darn.es/adding-siteleaf-to-a-github-pages-site/</id>
    <content type="html">

        &lt;p&gt;I’ve been using Siteleaf a lot recently, for both my day job and personal projects. In light of this, I decided to create a screencast of myself going through the process of adding Siteleaf to a pre-existing site running on GitHub Pages. As additional reference, I’ve documented the process below.&lt;/p&gt;&lt;h2 id=&quot;the-process&quot;&gt;The process&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://manage.siteleaf.com/signup&quot;&gt;Sign up to Siteleaf&lt;/a&gt; with your GitHub account. Once you are signed up, click “&lt;a href=&quot;https://manage.siteleaf.com/sites/new&quot;&gt;Create new site&lt;/a&gt;”. You’ll be asked for the title and domain of your site, but instead, click “&lt;a href=&quot;https://manage.siteleaf.com/sites/import&quot;&gt;Connect existing repo&lt;/a&gt;” shown on right of the screen. Select the repo you want to connect with Siteleaf by typing and using the dropdown list. Check the branch is right; you’ll most likely want &lt;code&gt;master&lt;/code&gt; or &lt;code&gt;gh-pages&lt;/code&gt;.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/connect-repo.png&quot; class=&quot;kg-image&quot; alt=&quot;Connecting an existing repo&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Once you’ve given permission to access the repo on your GitHub account, Siteleaf will run through your configuration file, front matter and any other settings within the site. &lt;em&gt;“This is to make the site more machine readable”&lt;/em&gt;, as quoted from &lt;a href=&quot;https://www.siteleaf.com/blog/connecting-github/&quot;&gt;their tutorial video&lt;/a&gt;. After it has converted your files, you’ll then have access to the admin interface.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/admin-ui.png&quot; class=&quot;kg-image&quot; alt=&quot;The Siteleaf admin interface&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Now that your site is up and running with Siteleaf, it’s best to check through your settings and test whether changes you make in the admin interface are reflected on the live site and in the GitHub repo.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/commited-change.png&quot; class=&quot;kg-image&quot; alt=&quot;Making a change to the repo via Siteleaf&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Check that the site settings are using GitHub Pages for the hosting, that the compiling is performed by GitHub Pages, and that you are using the right plan for the site. In my case, I’m using the free Developer plan.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/site-settings.png&quot; class=&quot;kg-image&quot; alt=&quot;Siteleaf hosting and repo settings&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;You should be all set to start editing and adding content to your Jekyll site hosted on GitHub Pages. ??&lt;/p&gt;&lt;p&gt;A couple of things you might want to make note of: Siteleaf uses an &lt;code&gt;_uploads&lt;/code&gt; directory for uploading images and other assets. When you upload a file for the first time, Siteleaf will add the file into the &lt;code&gt;_uploads&lt;/code&gt; directory, as well as creating a collection call “Uploads” in your &lt;code&gt;_config.yml&lt;/code&gt; file. You might want to consider moving other assets you had prior to using Siteleaf so that users can access and use these files throughout the admin.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/uploads-collection.png&quot; class=&quot;kg-image&quot; alt=&quot;The Uploads collection in the configuration file&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Something else that might interest you is &lt;a href=&quot;https://learn.siteleaf.com/content/defaults/&quot;&gt;Default fields&lt;/a&gt; and &lt;a href=&quot;https://learn.siteleaf.com/content/metadata/#smart-field-names&quot;&gt;Smart Field Names&lt;/a&gt;. Default fields allow you to effectively create your own custom fields for pages, posts or any collection. Smart Field Names allow you to take custom fields further by adding colour pickers, upload buttons and date pickers, all by just using smart naming conventions.&lt;/p&gt;&lt;p&gt;So, there we go! Siteleaf is pretty easy to set up with a GitHub Pages site and it doesn’t take long before you’re editing content and inviting collaborators or clients to start contributing, as well. I hope you find this tutorial and screencast useful. ??&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>I put CSS in my HTML and nothing exploded</title>
    <link>https://darn.es/css-in-my-html/
    <updated>2020-03-09T23:00:34.000+00:00</updated>
    <id>https://darn.es/css-in-my-html/</id>
    <content type="html">

        &lt;p&gt;&lt;strong&gt;When I first felt comfortable with front-end web development, I thought inline CSS was a filthy thing to do; something that could only be done in haste or from poor implementation. Thankfully, I’m a little wiser now and can understand that there is almost &lt;em&gt;always&lt;/em&gt; a reason behind the implementation.&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;In this article, I’m going to take a look at a few of the possible negatives of inline CSS and “Internal Stylesheets”, along with an example of practical usage. Let’s take look at some of the reasons why people might be adverse to placing their styles inline.&lt;/p&gt;&lt;h3 id=&quot;it-s-difficult-to-manage&quot;&gt;It’s difficult to manage&lt;/h3&gt;&lt;p&gt;The tooling we have today means that it’s pretty darn easy to plant CSS directly onto the page with a &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt; block, or even directly applied to the element. ??&lt;/p&gt;&lt;h3 id=&quot;it-loads-unwanted-css&quot;&gt;It loads unwanted CSS&lt;/h3&gt;&lt;p&gt;It depends ??. If you’re working on a small site like mine, the amount of unwanted CSS is not worth considering. However, for large scale sites and applications, you might want to look into other tooling.&lt;/p&gt;&lt;h3 id=&quot;you-can-t-depend-on-javascript-for-css&quot;&gt;You can’t depend on JavaScript for CSS&lt;/h3&gt;&lt;p&gt;You can, if your application depends on JavaScript. There are some cases where non-JavaScript users should be catered for. However, there are also cases where applications and sites with heavy dependance on JS should just go with the flow. ??&lt;/p&gt;&lt;h3 id=&quot;i-can-t-read-the-source&quot;&gt;I can’t read the source&lt;/h3&gt;&lt;p&gt;Eh? Why are you reading the source so intently? Stay in the web inspector - it’s all cool there. ??&lt;/p&gt;&lt;h2 id=&quot;the-practical-test&quot;&gt;The practical test&lt;/h2&gt;&lt;p&gt;So, with all that in mind, let’s take this into a practical scenario. Now, this scenario isn’t an app or large scale website - it’s just this blog - but it is taking into account all the items above! In this example, I’ve taken the CSS for this site and added it directly into the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; as an “internal stylesheet”, which is technically not inline, but some people might consider it like that. I’ll cut to the chase and give the results:&lt;/p&gt;&lt;h3 id=&quot;using-an-external-linked-css-file&quot;&gt;Using an external linked &lt;code&gt;.css&lt;/code&gt; file&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Mobile friendliness: &lt;strong&gt;100/100&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Mobile speed: &lt;strong&gt;89/100&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Desktop speed: &lt;strong&gt;96/100&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Results from &lt;a href=&quot;https://testmysite.thinkwithgoogle.com/&quot;&gt;testmysite.thinkwithgoogle.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;PageSpeed Score: &lt;strong&gt;A, 96%&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;YSlow Score: &lt;strong&gt;A, 95%&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Page Load Time: &lt;strong&gt;0.7s&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Total Page Size: &lt;strong&gt;116kb&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Results from &lt;a href=&quot;https://gtmetrix.com/&quot;&gt;gtmetrix.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;using-an-internal-stylesheet-with-style&quot;&gt;Using an internal stylesheet with &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;Mobile friendlyness: &lt;strong&gt;100/100&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Mobile speed: &lt;strong&gt;98/100&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Desktop speed: &lt;strong&gt;98/100&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Results from &lt;a href=&quot;https://testmysite.thinkwithgoogle.com/&quot;&gt;testmysite.thinkwithgoogle.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;ul&gt;&lt;li&gt;PageSpeed Score: &lt;strong&gt;A, 97%&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;YSlow Score: &lt;strong&gt;A, 96%&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Page Load Time: &lt;strong&gt;0.5s&lt;/strong&gt;&lt;/li&gt;&lt;li&gt;Total Page Size: &lt;strong&gt;116kb&lt;/strong&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;em&gt;Results from &lt;a href=&quot;https://gtmetrix.com/&quot;&gt;gtmetrix.com&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/results.png&quot; class=&quot;kg-image&quot; alt=&quot;Google speed results&quot; loading=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;Awesome! My site loads faster &lt;strong&gt;(from 0.7s to 0.5s)&lt;/strong&gt; and I’m getting perf points from Google, which in reality mean nothing, but at least my site is seen more quickly on devices with poor connections. So, what am I trying to say here? I’m not demanding you go off and make all your CSS inline right now. I’m saying: consider the options, weigh them up against the norm and test them out. As long as you have a good reason behind the implementation, it kind of doesn’t matter what others think.&lt;/p&gt;&lt;p&gt;??&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>My domain is my playground</title>
    <link>https://darn.es/my-domain-is-my-playground/
    <updated>2020-03-08T19:37:47.000+00:00</updated>
    <id>https://darn.es/my-domain-is-my-playground/</id>
    <content type="html">

        &lt;p&gt;Whenever I want to test or try something out, I do one of three things; I create a new pen on &lt;a href=&quot;https://codepen.io/&quot;&gt;CodePen&lt;/a&gt;, push some files to a new &lt;a href=&quot;https://surge.sh/&quot;&gt;Surge&lt;/a&gt; project, or I’ll try it out live on my personal site or blog. The last one in that list is my favourite thing to do.&lt;/p&gt;&lt;p&gt;If there’s a performance boost or enriching addition that I need to test out, I just bash it straight into my blog. As much as I like showing a professional looking site, I’m far more keen to try something new. Sure, my site could completely fall over from the change. However, I can easily revert it back, plus I’ll have learnt that whatever I added or changed doesn’t work.&lt;/p&gt;&lt;p&gt;You probably have something similar; maybe not with your own site, but with a side project site. If you don’t have one of these, then maybe you should. It could be your personal playground: a place to try out quick wins, but also learn from mistakes.&lt;/p&gt;&lt;h2 id=&quot;e-g-&quot;&gt;e.g.&lt;/h2&gt;&lt;p&gt;Here’s a brief example: after seeing a few results come out of the new &lt;a href=&quot;https://testmysite.thinkwithgoogle.com/&quot;&gt;“Test my site”&lt;/a&gt; page from Google (which is actually just &lt;a href=&quot;https://developers.google.com/speed/pagespeed/insights/&quot;&gt;Page Speed Insights&lt;/a&gt; with a pretty UI over it), I tested my own site out on it. I got 73/100 for mobile speed, but wasn’t sure why, so I tried some things out. After quite a few attempts, a portion of which broke my site, I managed to boost it to 89/100.&lt;/p&gt;&lt;p&gt;The solution was &lt;a href=&quot;https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-srcset/&quot;&gt;using &lt;code&gt;srcset&lt;/code&gt;&lt;/a&gt; for my avatar and moving my Google Fonts reference to the footer of my site. Now that I’ve tried these out and have seen them working, I’ll be able to use them on other projects.&lt;/p&gt;&lt;p&gt;Alright, so this example is pretty small fry. I do suggest you find your development playground though: a place where you can try things out ‘live’. Trying stuff out on a development URL or locally isn’t the same.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Jekyll Conf lightning talk</title>
    <link>https://darn.es/jekyll-conf-lightning-talk/
    <updated>2020-03-08T19:37:31.000+00:00</updated>
    <id>https://darn.es/jekyll-conf-lightning-talk/</id>
    <content type="html">

        &lt;p&gt;Recently I was asked by &lt;a href=&quot;https://cloudcannon.com/&quot;&gt;CloudCannon&lt;/a&gt; to record a lightning talk for &lt;a href=&quot;https://jekyllconf.com/&quot;&gt;Jekyll Conf&lt;/a&gt;. It was a great opportunity to contribute to the Jekyll community. You can watch all the talks from the day &lt;a href=&quot;https://www.youtube.com/playlist?list=PLrxYIq_0LFJdi2HJ6lnY4nm7ewu221hyS&quot;&gt;on YouTube&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Below is a video of my lightning talk, as well as a write up of my talk. You can also check out my slides on &lt;a href=&quot;https://slides.com/daviddarnes/deck-1&quot;&gt;Slides.com&lt;/a&gt;.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-embed-card&quot;&gt;&lt;iframe width=&quot;480&quot; height=&quot;270&quot; src=&quot;https://www.youtube.com/embed/Y4qwpN40Dvg?feature=oembed&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;h2 id=&quot;doing-a-lot-with-a-little&quot;&gt;Doing a lot with a little&lt;/h2&gt;&lt;p&gt;Hi I’m David Darnes, and I’m gonna be talking about doing a lot with a little. So I’m web designer and front-end developer and work at &lt;a href=&quot;https://www.basekit.com/&quot;&gt;BaseKit&lt;/a&gt;, where we build an online website editor. That is when we’re not &lt;a href=&quot;https://slides.com/daviddarnes/deck-1#/2&quot;&gt;mummifying each other&lt;/a&gt;. Overall, I just like building websites, and using the tools online to help me build them. But it got me thinking, how much can we achieve with was essentially not very much?&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/lazy.gif&quot; class=&quot;kg-image&quot; alt=&quot;lazy&quot; loading=&quot;lazy&quot; title=&quot;lazy&quot; /&gt;&lt;/figure&gt;&lt;p&gt;No, this isn’t gonna be a talk on how to be lazy or how to cut corners. This is about utilizing the tools that we have online to really build a quite rich website.&lt;/p&gt;&lt;p&gt;So let’s begin, and since this is Jekyll Conference we might as well use &lt;a href=&quot;https://jekyllrb.com/&quot;&gt;Jekyll&lt;/a&gt;. And of course using &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt; means that we can host the site and manage it with versioning. But what about an SSL certificate? By using GitHub Pages we do get an SSL, but I want to use a custom domain. So that’s why I use &lt;a href=&quot;https://www.cloudflare.com/&quot;&gt;CloudFlare&lt;/a&gt;, and CloudFlare gives me an SSL certificate and a user interface to &lt;a href=&quot;https://slides.com/daviddarnes/deck-1/#/6&quot;&gt;control my URLs&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Let’s talk about content. Jekyll provides us with pages, posts, but what about products? Can we add an ecommerce system to our site? Well we can with &lt;a href=&quot;https://gumroad.com/&quot;&gt;Gumroad&lt;/a&gt;. Gumroad will allow us to add a product directly into our site. All we need to do is add a bit of &lt;a href=&quot;https://slides.com/daviddarnes/deck-1/#/8&quot;&gt;JavaScript and a link&lt;/a&gt;, and that’s it. It’ll work pretty much like a normal ecommerce site.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/docs-search.gif&quot; class=&quot;kg-image&quot; alt=&quot;Simple Jekyll Search&quot; loading=&quot;lazy&quot; title=&quot;Simple Jekyll Search&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Now we have all this content going on, we need a searching method to help our users find stuff they want. There are several tools out there that can add a search to your site. However for me I would use &lt;a href=&quot;https://github.com/christian-fei/Simple-Jekyll-Search&quot;&gt;Simple Jekyll Search&lt;/a&gt;. What this does is give you a live search tool for your site, allowing users to find anything they want.&lt;/p&gt;&lt;p&gt;What about contacting your users, or people who have bought products from your site? Yeah, we could use &lt;a href=&quot;https://disqus.com/&quot;&gt;Disqus&lt;/a&gt;, but what about on a one-to-one basis? Well we can achieve that with &lt;a href=&quot;https://formspree.io/&quot;&gt;Formspree&lt;/a&gt;, which is a really easy way to add contact forms to pretty much any site. I’ve even &lt;a href=&quot;https://webdesign.tutsplus.com/tutorials/quick-tip-add-a-formspree-form-to-your-static-sites--cms-23870&quot;&gt;created a tutorial online&lt;/a&gt; that you can use, just follow the link in the slides.&lt;/p&gt;&lt;p&gt;So let’s round things up. We’ve got templating and page generation, hosting, an SSL certificate, ecommerce, site search and contact forms. But some of you might be thinking…&lt;/p&gt;&lt;p&gt;So what, I’ve known about these tools already. You’re not really telling me anything new&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/benny.gif&quot; class=&quot;kg-image&quot; alt=&quot;Benny&quot; loading=&quot;lazy&quot; title=&quot;Benny&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Well thinking about it. All these tools allow you to build a lot of things. You can do so much with what we have online, the world is our oyster we can build anything we like with not a lot. I’m also pretty grateful that these tools even exist. So thank you to those people who have made all these tools and help me to build things every day, and I’d like to thank you for watching… (reading).&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>How to create an open source portfolio</title>
    <link>https://darn.es/create-an-open-source-directory-on-github-pages/
    <updated>2020-03-08T19:37:20.000+00:00</updated>
    <id>https://darn.es/create-an-open-source-directory-on-github-pages/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://webdesign.tutsplus.com/tutorials/how-to-create-an-open-source-directory-on-github-pages--cms-26225">How to create an open source portfolio</a></p>
        <pre>https://webdesign.tutsplus.com/tutorials/how-to-create-an-open-source-directory-on-github-pages--cms-26225</pre>

    </content>
  </entry>
  <entry>
    <title>Could GitHub make a CMS?</title>
    <link>https://darn.es/could-github-make-a-cms/
    <updated>2020-03-08T19:37:04.000+00:00</updated>
    <id>https://darn.es/could-github-make-a-cms/</id>
    <content type="html">

        &lt;p&gt;Following on from &lt;a href=&quot;https://david.darn.es/2016/02/18/using-the-github-com-interface/&quot;&gt;my previous article&lt;/a&gt;, I wanted to explore the idea of GitHub making a CMS. What would it be? How would it work? Why would they even do it?&lt;/p&gt;&lt;p&gt;&lt;strong&gt;To break down this hypothetical concept, I’m going to use the &lt;a href=&quot;https://en.wikipedia.org/wiki/Five_Ws&quot;&gt;Five Ws&lt;/a&gt;, otherwise known as “Who, What, Where, When and Why?”.&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;who&quot;&gt;Who?&lt;/h2&gt;&lt;p&gt;Well, GitHub of course. That was easy…&lt;/p&gt;&lt;p&gt;Actually, let’s use this opportunity to look at who else has made a CMS for GitHub Pages:&lt;/p&gt;&lt;h3 id=&quot;cloudcannon&quot;&gt;&lt;a href=&quot;https://cloudcannon.com/&quot;&gt;CloudCannon&lt;/a&gt;&lt;/h3&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/cloudcannon.png&quot; class=&quot;kg-image&quot; alt=&quot;cloudcannon&quot; loading=&quot;lazy&quot; title=&quot;cloudcannon&quot; /&gt;&lt;/figure&gt;&lt;p&gt;CloudCannon ticks all the boxes of what you’d expect from a CMS that works with Jekyll &amp;amp; GitHub Pages: &lt;a href=&quot;https://docs.cloudcannon.com/editing/blogging/&quot;&gt;Posts&lt;/a&gt;, &lt;a href=&quot;https://docs.cloudcannon.com/editing/content-editor/&quot;&gt;pages&lt;/a&gt;, &lt;a href=&quot;https://docs.cloudcannon.com/editing/front-matter/&quot;&gt;metadata&lt;/a&gt;; everything is available in their UI. In addition, you can use an &lt;code&gt;editable&lt;/code&gt; class name to give control over the content in the UI.&lt;/p&gt;&lt;h3 id=&quot;siteleaf&quot;&gt;&lt;a href=&quot;https://www.siteleaf.com/&quot;&gt;Siteleaf&lt;/a&gt;&lt;/h3&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/siteleaf.jpg&quot; class=&quot;kg-image&quot; alt=&quot;siteleaf&quot; loading=&quot;lazy&quot; title=&quot;siteleaf&quot; /&gt;&lt;/figure&gt;&lt;p&gt;This is a CMS that can publish to GitHub Pages. However, it doesn’t use Jekyll. The content editor has some &lt;a href=&quot;https://www.siteleaf.com/blog/markdown-in-siteleaf/&quot;&gt;really nice features&lt;/a&gt;. What interests me most is &lt;a href=&quot;https://v2.siteleaf.com/&quot;&gt;v2 of the CMS&lt;/a&gt;, which brings it right inline with the full GitHub ecosystem.&lt;/p&gt;&lt;h3 id=&quot;prose-io&quot;&gt;&lt;a href=&quot;https://prose.io/&quot;&gt;prose.io&lt;/a&gt;&lt;/h3&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/prose.png&quot; class=&quot;kg-image&quot; alt=&quot;prose&quot; loading=&quot;lazy&quot; title=&quot;prose&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Prose is an extremely clever &lt;a href=&quot;https://github.com/prose/prose&quot;&gt;JavaScript project on Github&lt;/a&gt;. You simply authorise it with your GitHub account and you’re off.&lt;/p&gt;&lt;h3 id=&quot;diy&quot;&gt;&lt;a href=&quot;https://pages.github.com/&quot;&gt;DIY&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Well, you know the score. Clone your site down, edit your content with whatever application you like, and then push it back up. It’s simple, it works, but it’s not the experience you’re looking for.&lt;/p&gt;&lt;p&gt;If GitHub were to make a CMS, these are what they would have to contend with. There are lots of interesting features in all of these CMS’s. Prose has quite a sparse UI, allowing you to focus on what you’re writing. I like how &lt;a href=&quot;https://docs.cloudcannon.com/editing/front-matter/&quot;&gt;CloudCannon presents front matter&lt;/a&gt;, essentially turning it into custom fields for your pages and posts. The &lt;a href=&quot;https://www.siteleaf.com/blog/markdown-in-siteleaf/&quot;&gt;drag and drop feature in Siteleaf&lt;/a&gt; is really clever, which conveniently lines up with GitHub’s new drag and drop feature.&lt;/p&gt;&lt;h2 id=&quot;what&quot;&gt;What&lt;/h2&gt;&lt;p&gt;Now that we’ve done a bit of competitor research, we can start to piece together what the CMS might be like.&lt;/p&gt;&lt;p&gt;I don’t feel like it should be overly complex in execution. They could create something completely independent, but that would be a waste of what they’ve already implemented into the main product. They already have a web interface, markdown editing and now file upload, so why start over?&lt;/p&gt;&lt;p&gt;We’re now thinking of something more like an expansion and improvement on the current editor. Less a CMS, more of an &lt;strong&gt;enhanced writing experience&lt;/strong&gt;. The drawback to this is that it’s not easy for a client to pick up, which is what the other CMS’s mentioned above do very well.&lt;/p&gt;&lt;p&gt;Let’s not forget, though, that this environment is designed for more regular users of GitHub. It would be easier to focus on helping GitHub users to write, rather than chasing users that are better off using those other systems.&lt;/p&gt;&lt;h2 id=&quot;where&quot;&gt;Where&lt;/h2&gt;&lt;p&gt;So, where would this enhanced editing experience go? Well, as mentioned above, it would be mixed into GitHub.com, but where? I’ve put together some examples that they could implement:&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/markdown-editor.png&quot; class=&quot;kg-image&quot; alt=&quot;file markdown editor&quot; loading=&quot;lazy&quot; title=&quot;file markdown editor&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Here a new “md” file has triggered the appearance of a markdown editor at the top. Note the file name, as well. This could be autofilled when the user creates a new file, based on if the file being created is inside the &lt;code&gt;_posts&lt;/code&gt; or &lt;code&gt;_drafts&lt;/code&gt; directory.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/editor-drag-drop.png&quot; class=&quot;kg-image&quot; alt=&quot;editor drag and drop images&quot; loading=&quot;lazy&quot; title=&quot;editor drag and drop images&quot; /&gt;&lt;/figure&gt;&lt;p&gt;The editor could be smart with images, too. Mimicking the drag and drop technique from Siteleaf, when the user drags an image onto the page, the image could be uploaded and and the relevant markdown could be inserted to the page.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/use-canvas.gif&quot; class=&quot;kg-image&quot; alt=&quot;canvas markdown editor&quot; loading=&quot;lazy&quot; title=&quot;canvas markdown editor&quot; /&gt;&lt;/figure&gt;&lt;p&gt;What about improving the markdown presentation? I’ve been using &lt;a href=&quot;https://usecanvas.com/&quot;&gt;Canvas&lt;/a&gt; a lot recently and the way it presents markdown content is really clever; this allows full markdown editing, but still shows the resulting copy.&lt;/p&gt;&lt;h2 id=&quot;when&quot;&gt;When&lt;/h2&gt;&lt;p&gt;Um, well, now? I sadly can’t see GitHub’s internal roadmap, but their feature additions seem to be few and far between. That is, until recently. &lt;a href=&quot;https://github.com/blog/&quot;&gt;Their blog&lt;/a&gt; has been a bit more active lately with adding more features.&lt;/p&gt;&lt;p&gt;I would imagine if they did do this, it would be one step at a time, adding a feature and then gradually rolling it out. Some might see it as slow development, but with a site of this scale, you can’t play it safe enough.&lt;/p&gt;&lt;h2 id=&quot;why&quot;&gt;Why&lt;/h2&gt;&lt;p&gt;Good question. Why bother? As we mentioned above, there are plenty of CMS’s out there that are willing to fill the gap. I wouldn’t be surprised if more appear in the future. GitHub could not bother with any of this and they’ll be no worse off. But, what if they did? Would it be something that tips even more users to their platform? Could the combination of Jekyll, GitHub Pages and their easy-to-use content editor expand their userbase?&lt;/p&gt;&lt;p&gt;My thinking is, of course, all hypothetical. They would have to do more than what I’ve covered in this article to achieve the ideas I’m throwing around. I hope it’s at least on their radar. For now, I’m happy using Atom.&lt;/p&gt;&lt;p&gt;Cheers, Dave&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Building a site entirely on github.com</title>
    <link>https://darn.es/using-the-github-com-interface/
    <updated>2020-03-08T19:36:53.000+00:00</updated>
    <id>https://darn.es/using-the-github-com-interface/</id>
    <content type="html">

        &lt;p&gt;Have you ever thought:&lt;/p&gt;&lt;p&gt;What’s the minimum I need in order to build a site?&lt;/p&gt;&lt;p&gt;I’ve thought about it quite a bit. So much so, I like to test my theories out in personal projects; in this case, &lt;a href=&quot;https://darn.es/&quot;&gt;my own portfolio site&lt;/a&gt;. However, I might have taken it a bit too far.&lt;/p&gt;&lt;p&gt;&lt;strong&gt;If I can create a simple functioning site using GitHub Pages and GitHub.com has a web interface, why can’t I build a site &lt;em&gt;entirely&lt;/em&gt; in the browser? I mean, how hard could it be?&lt;/strong&gt;&lt;/p&gt;&lt;h2 id=&quot;design&quot;&gt;Design&lt;/h2&gt;&lt;blockquote&gt;You said build Dave, not design!&lt;/blockquote&gt;&lt;p&gt;I know, you’re right. That’s why I did this bit in Sketch before I got stuck into the meat &amp;amp; potatoes. I also used Dribbble to get feedback. After a few comments and rebounds, I ended up with &lt;a href=&quot;https://dribbble.com/shots/2219504-darn-es-Revision-2-Design&quot;&gt;a design I was happy to go ahead with&lt;/a&gt;.&lt;/p&gt;&lt;h2 id=&quot;development&quot;&gt;Development&lt;/h2&gt;&lt;p&gt;Things started off great, but as I progressed further with the build, I realised that GitHub.com falls slightly short of what I really needed for the task at hand. I think the best way to describe it is by breaking things down a bit.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/new-repo.png&quot; class=&quot;kg-image&quot; alt=&quot;new repo creation&quot; loading=&quot;lazy&quot; title=&quot;new repo creation&quot; /&gt;&lt;/figure&gt;&lt;h2 id=&quot;configuration&quot;&gt;Configuration&lt;/h2&gt;&lt;p&gt;The setup process was easy. I find it kind of exciting when creating a new GitHub repo. The screen for it isn’t the most dramatic, but this is serious coding for adults. Then it’s just a case of creating the &lt;code&gt;gh-pages&lt;/code&gt; branch and adding an index.html file to “Hello World” this party.&lt;/p&gt;&lt;p&gt;Because I’m not working locally, I can’t preview my changes and approve them before applying them to the live url (the live url being the very helpful one that GitHub gives you automatically: &lt;code&gt;username.github.io/your-repo-name/&lt;/code&gt;). So, I removed the &lt;code&gt;master&lt;/code&gt; branch entirely and just started committing straight to the live &lt;code&gt;gh-pages&lt;/code&gt; branch. Needs must.&lt;/p&gt;&lt;p&gt;Despite doing this, the process of making a change and then previewing it was taxing. I understand that &lt;strong&gt;a lot&lt;/strong&gt; has to happen before my site updates: Jekyll builds, then flush the cache and push to their servers. This might have been more of an issue if I wasn’t someone who enjoys front-end development; however, because I do, I don’t need to check the result that often. I’m quite happy to write a ton of HTML and CSS, and then look at the outcome way further down the line.&lt;/p&gt;&lt;h2 id=&quot;html-css-js&quot;&gt;HTML, CSS &amp;amp; JS&lt;/h2&gt;&lt;p&gt;Writing front-end code in the GitHub.com interface is a pretty good experience for a web-based editor. It provides relevant syntax highlighting and it even automatically self closes HTML elements and CSS selectors. When I tested the code completion for this article, I was impressed to find that it’ll quite happily help you finish your code even when switching between HTML and CSS in the same file.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/code-completion.gif&quot; class=&quot;kg-image&quot; alt=&quot;code completion&quot; loading=&quot;lazy&quot; title=&quot;code completion&quot; /&gt;&lt;/figure&gt;&lt;p&gt;However, none of this works when you first create the file. The editor is dumb to it’s file name at point of creation. So, you have to create a blank file and then open it up again to benefit from even just the syntax highlighting. In case you’re wondering, GitHub uses &lt;a href=&quot;https://ace.c9.io/#nav=about&quot;&gt;ace editor&lt;/a&gt;, which is somewhat new to me, as most of the time I see &lt;a href=&quot;https://codemirror.net/&quot;&gt;code mirror&lt;/a&gt; being used.&lt;/p&gt;&lt;p&gt;Any gripes I’ve mentioned pale into existence compared to the &lt;strong&gt;annoying locked text editor height!&lt;/strong&gt; Over time, it’s become a right pain. The editing area takes up 90% of a regular laptop screen height and the commit button is right underneath. Because of this, &lt;em&gt;every&lt;/em&gt; time I make a change on a file that’s taller than the text editor, I have to fight with the double scrollbars to get to the commit area. I don’t see why the editing area doesn’t grow with the code, thus removing the need to scroll inside it.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/scrolling.gif&quot; class=&quot;kg-image&quot; alt=&quot;scrolling gripe&quot; loading=&quot;lazy&quot; title=&quot;scrolling gripe&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Alright, rant over. Lets talk about something good again… erm… I like that I can change the indent size in the top right. You don’t have to select anything either; the code just moves in and out. Wrapping is kinda useful, I guess. You can also change between using spaces or tabs for indenting. However, it doesn’t change any existing code, even if you select a line of code; it just applies when you write something new.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/indenting.gif&quot; class=&quot;kg-image&quot; alt=&quot;code indenting&quot; loading=&quot;lazy&quot; title=&quot;code indenting&quot; /&gt;&lt;/figure&gt;&lt;h2 id=&quot;markdown&quot;&gt;Markdown&lt;/h2&gt;&lt;p&gt;I’m big fan of markdown, especially since it stops people putting a single line of text into 4 paragraph elements and about 14 span elements. Despite Markdown being something that GitHub tends to tout, it’s not really well catered for. You get the same code editor as you do for any other file, but no auto completion, just syntax highlighting. At least the changes preview shows the processed markdown.&lt;/p&gt;&lt;p&gt;Surely they could think of a way to make writing markdown easier? Oh, wait - here it is in the &lt;strong&gt;damn comment box in issues!&lt;/strong&gt;&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/comment-formatting.png&quot; class=&quot;kg-image&quot; alt=&quot;comment formatting&quot; loading=&quot;lazy&quot; title=&quot;comment formatting&quot; /&gt;&lt;/figure&gt;&lt;p&gt;But Dave, they only just implemented that into comments…&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/wiki-formatting.png&quot; class=&quot;kg-image&quot; alt=&quot;wiki formatting&quot; loading=&quot;lazy&quot; title=&quot;wiki formatting&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Nope. Try creating new wiki page. That markdown editor &lt;a href=&quot;https://github.com/blog/774-git-powered-wikis-improved&quot;&gt;has been there for ages&lt;/a&gt;. If that was in the code editing area, then they’d be on the road to making a damn fine writing space for Jekyll bloggers. Of course I’m being way too harsh. Writing markdown isn’t that hard. I just think GitHub isn’t making the most of it - they seem to be &lt;a href=&quot;https://github.com/blog/2111-issue-and-pull-request-templates&quot;&gt;using md files more&lt;/a&gt; and more.&lt;/p&gt;&lt;h2 id=&quot;data-yml-&quot;&gt;Data (YML)&lt;/h2&gt;&lt;p&gt;YML files are a clean, crisp pillow against the rough, worn out, tassel stitched cushion that is JSON. I’m sure JSON has it’s place in the dev world, but using YML to manage data on a Jekyll site is tons easier than it might’ve been. GitHub.com provides almost nothing to help edit YML data. The only aid I’ve seen is that front matter, the small piece of YML data at the top of Jekyll markdown pages, get’s transformed into a table layout for slightly more readable view. I’m not going to complain about the lack of tools when YML allows me to manipulate complex data with ease.&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/front-matter.gif&quot; class=&quot;kg-image&quot; alt=&quot;front matter&quot; loading=&quot;lazy&quot; title=&quot;front matter&quot; /&gt;&lt;/figure&gt;&lt;h2 id=&quot;graphics&quot;&gt;Graphics&lt;/h2&gt;&lt;p&gt;This was nearly the end for my endeavour. The other issues were just user experience; this was an actual blocker. There is currently &lt;strong&gt;no way to upload images to a repo via GitHub.com&lt;/strong&gt;. The only, and I mean only, way is to upload them to an issue.&lt;/p&gt;&lt;p&gt;Wait a minute, Dave. Isn’t there a way to upload images in the wiki markdown editor?&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/image-url.gif&quot; class=&quot;kg-image&quot; alt=&quot;image url&quot; loading=&quot;lazy&quot; title=&quot;image url&quot; /&gt;&lt;/figure&gt;&lt;p&gt;Haha nope. That’s a clever joke one from GitHub. It only allows you to use a url - another inconsistency with the comments markdown editor.&lt;/p&gt;&lt;p&gt;As soon as I discovered that, I thought “Nope, nope, nope, nope. I’m not using issues to upload content”. I’m really surprised this is not possible. Even a simple upload file button would do. Adding a size limit would be ok - if anything, it would make sense.&lt;/p&gt;&lt;p&gt;Due to this hurdle, I had to get smart, so in stepped SVGs. I collated them together and created an &lt;code&gt;icons.svg&lt;/code&gt; file &lt;a href=&quot;https://github.com/daviddarnes/darn.es/blob/gh-pages/_includes/icons.svg?short_path=b33e823&quot;&gt;containing all the icons&lt;/a&gt; that will represent each of my projects and any other iconography I’ll need. The only actual image on the site is my avatar, which is subsequently used for all my favicons. To do this, I’m taking advantage of &lt;a href=&quot;https://github.com/daviddarnes/darn.es/blob/gh-pages/_includes/favicons.html&quot;&gt;GitHub’s avatar url and the resizing option&lt;/a&gt;. Not only can I resize the image with the url to the exact pixel, but whenever I update my GitHub avatar, my site updates as well. If you want to find out your avatar url, just copy the image address of your avatar on your GitHub profile page.&lt;/p&gt;&lt;p&gt;The workarounds have caused me to use techniques that actually make the site better. I still think GitHub.com needs a way to upload images and general graphics. I’d put it at number 1 on my list, but I’m pleased it forced me to get smart with my site.&lt;/p&gt;&lt;h2 id=&quot;update-&quot;&gt;Update!&lt;/h2&gt;&lt;p&gt;Hours from me posting this article GitHub drops the bomb that is &lt;a href=&quot;https://github.com/blog/2105-upload-files-to-your-repositories&quot;&gt;file uploading&lt;/a&gt;. I know! The one biggest gripe of this project has now been solved. Nice job GitHub! Look at it, isn’t it glorious:&lt;/p&gt;&lt;figure class=&quot;kg-card kg-image-card&quot;&gt;&lt;img src=&quot;https://hub.darn.es/content/images/2020/03/file-upload.gif&quot; class=&quot;kg-image&quot; alt=&quot;file upload&quot; loading=&quot;lazy&quot; title=&quot;file upload&quot; /&gt;&lt;/figure&gt;&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Building a site using GitHub.com was fun, but I wouldn’t advise it.&lt;/strong&gt; I learnt a lot about their UI: the really good things and the oddly bad things. GitHub.com just needs some time to grow. With the addition of file uploading it shows that they are keen to grow as well.&lt;/p&gt;&lt;p&gt;Let’s not forget that the web interface isn’t designed for this. It’s there to make minor tweaks and changes that you just want to dip into. I’m still extremely impressed and grateful I was even able to achieve it, so thanks to Octocat and the rest of the gang. If you want to snoop around the code, you can &lt;a href=&quot;https://github.com/daviddarnes/darn.es&quot;&gt;checkout the repo on GitHub&lt;/a&gt;.&lt;/p&gt;&lt;p&gt;Cheers, Dave&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>My screencasting setup</title>
    <link>https://darn.es/my-screencasting-setup/
    <updated>2020-03-08T19:36:23.000+00:00</updated>
    <id>https://darn.es/my-screencasting-setup/</id>
    <content type="html">

        &lt;p&gt;A while ago I created a screencast series called ‘&lt;a href=&quot;https://www.youtube.com/playlist?list=PLqG97mWmzNL7OFKjx0eXQpwpOaXFRM251&quot;&gt;Baking Bread.li&lt;/a&gt;’, this was in preparation for a course for Tuts+ called ‘&lt;a href=&quot;https://webdesign.tutsplus.com/courses/building-websites-with-basekit&quot;&gt;Building Websites with BaseKit&lt;/a&gt;’. In order to make the course I needed to get some equipment together.&lt;/p&gt;&lt;p&gt;Instead of simply listing out everything I used and writing out a long article, I decided to create a screencast showing my setup and to get myself back into creating video content. Check it out the video below, hopefully it’ll help you make some decisions on your own setup:&lt;/p&gt;&lt;figure class=&quot;kg-card kg-embed-card&quot;&gt;&lt;iframe width=&quot;480&quot; height=&quot;270&quot; src=&quot;https://www.youtube.com/embed/_Ru3jyf3qWA?feature=oembed&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;&lt;/figure&gt;&lt;p&gt;Here’s a full list of everything I got for my screencasting work:&lt;/p&gt;&lt;h3 id=&quot;software&quot;&gt;Software&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://telestream.net/screenflow/overview.htm&quot;&gt;ScreenFlow&lt;/a&gt;&lt;/li&gt;&lt;li&gt;Plus whatever software you need&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;hardware&quot;&gt;Hardware&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/gp/product/B00H3JIGHA&quot;&gt;Dell UltraSharp U2414H&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/MDM12D-Monitor-Stand-Swivel-Rotate/dp/B0047GF0QW/ref=sr_1_11&quot;&gt;Dual LED/LCD Monitor Arm Stand&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;microphone-setup-headphones&quot;&gt;Microphone setup &amp;amp; headphones&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/gp/product/B000JM46FY&quot;&gt;RØDE Podcaster&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/gp/product/B001D7UYBO&quot;&gt;RØDE PSA1 Swivel Mount&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/gp/product/B004DE1K5S&quot;&gt;Microphone Shock Mount with Integrated Pop Shield&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/Sennheiser-Ergonomic-Closed-Back-Headphones-Compatibility/dp/B005N8W1Q0/ref=sr_1_52_m&quot;&gt;Sennheiser Headphones&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;h3 id=&quot;echo-proofing-panels&quot;&gt;Echo proofing panels&lt;/h3&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://www.amazon.co.uk/gp/product/B000RW7U9U&quot;&gt;15” Wedge Studio Foam Tiles&lt;/a&gt;&lt;/li&gt;&lt;li&gt;MDF panels&lt;/li&gt;&lt;li&gt;Staples &amp;amp; staple gun&lt;/li&gt;&lt;/ul&gt;

    </content>
  </entry>
  <entry>
    <title>GitHub Pages &amp; custom domains</title>
    <link>https://darn.es/github-pages-custom-domains/
    <updated>2020-03-08T19:36:10.000+00:00</updated>
    <id>https://darn.es/github-pages-custom-domains/</id>
    <content type="html">

        &lt;p&gt;I love &lt;a href=&quot;https://pages.github.com/&quot;&gt;GitHub Pages&lt;/a&gt;. So much so that I’ve created several websites using it. What I don’t love is setting up domain records. It’s up there with setting up email accounts and doing the dishes.&lt;/p&gt;&lt;h2 id=&quot;the-problem&quot;&gt;The problem&lt;/h2&gt;&lt;p&gt;The issue I have with domain records and GitHub Pages is &lt;a href=&quot;https://help.github.com/articles/setting-up-a-custom-domain-with-github-pages/&quot;&gt;the documentation&lt;/a&gt;, it’s not very clear to the average front-end developer like myself (it might just be me though). Also setting up domain records isn’t a regular thing for me, it’s normally done at the start or end of a project that’s taken a few weeks to put together. Which means it doesn’t stay fresh in my mind. So to solve this issue once and for all I’ve created a list of &lt;strong&gt;all&lt;/strong&gt; the ways you can use GitHub Pages and a custom domain.&lt;/p&gt;&lt;h2 id=&quot;the-options&quot;&gt;The options&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;Using a &lt;code&gt;name.github.io&lt;/code&gt; repo with a custom subdomain, e.g. &lt;code&gt;subdomain.website.com&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Create the record&lt;/p&gt;&lt;p&gt;&lt;code&gt;subdomain 10800 IN CNAME name.github.io.&lt;/code&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;It will use the &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt;&lt;li&gt;Create a &lt;code&gt;CNAME&lt;/code&gt; file containing &lt;code&gt;subdomain.website.com&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Using a &lt;code&gt;name.github.io&lt;/code&gt; repo with a custom naked domain, e.g. &lt;code&gt;website.com&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Create the records&lt;/p&gt;&lt;p&gt;&lt;code&gt;@ 10800 IN A 192.30.252.153&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;@ 10800 IN A 192.30.252.154&lt;/code&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;It will use the &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt;&lt;li&gt;Create a &lt;code&gt;CNAME&lt;/code&gt; file containing &lt;code&gt;website.com&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Using a regular repo with a custom subdomain, e.g. &lt;code&gt;subdomain.website.com&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Create the record&lt;/p&gt;&lt;p&gt;&lt;code&gt;subdomain 10800 IN CNAME name.github.io.&lt;/code&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create a &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;&lt;li&gt;Create a &lt;code&gt;CNAME&lt;/code&gt; file containing &lt;code&gt;subdomain.website.com&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Using a regular repo with a custom naked domain, e.g. &lt;code&gt;website.com&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Create the records&lt;/p&gt;&lt;p&gt;&lt;code&gt;@ 10800 IN A 192.30.252.153&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;@ 10800 IN A 192.30.252.154&lt;/code&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create a &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;&lt;li&gt;Create a &lt;code&gt;CNAME&lt;/code&gt; file containing &lt;code&gt;website.com&lt;/code&gt;&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Using a regular repo with a custom subdirectory, e.g. &lt;code&gt;website.com/repo-name&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Create the records&lt;/p&gt;&lt;p&gt;&lt;code&gt;@ 10800 IN A 192.30.252.153&lt;/code&gt;&lt;/p&gt;&lt;p&gt;&lt;code&gt;@ 10800 IN A 192.30.252.154&lt;/code&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create a &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;&lt;/ol&gt;&lt;p&gt;&lt;strong&gt;Using a regular repo with a custom subdomain and subdirectory, e.g. &lt;code&gt;subdomain.website.com/repo-name&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt;&lt;p&gt;Create the record&lt;/p&gt;&lt;p&gt;&lt;code&gt;subdomain 10800 IN CNAME name.github.io.&lt;/code&gt;&lt;/p&gt;&lt;ol&gt;&lt;li&gt;Create a &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/li&gt;&lt;/ol&gt;&lt;h2 id=&quot;additional-notes&quot;&gt;Additional notes&lt;/h2&gt;&lt;p&gt;It might be worth checking out this article on &lt;a href=&quot;https://blog.wikidot.com/blog:understanding-dns&quot;&gt;understanding DNS&lt;/a&gt;, it does quite a nice job of explaining the difference between a &lt;code&gt;CNAME&lt;/code&gt; and an &lt;code&gt;A&lt;/code&gt; record.&lt;/p&gt;&lt;h2 id=&quot;the-conclusion&quot;&gt;The conclusion&lt;/h2&gt;&lt;p&gt;Now that I’ve have this clearly documented I won’t have to guess records every time I come to setting up GitHub Pages ??. Hopefully this will help you as well. If you know a better way, just &lt;a href=&quot;https://github.com/daviddarnes/daviddarnes.github.io/blob/master/_posts/2015-07-10-github-pages-custom-domains.md&quot;&gt;submit a pull request to this article&lt;/a&gt;. Thanks to &lt;a href=&quot;https://twitter.com/createdbypete&quot;&gt;@createdbypete&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/jdennes&quot;&gt;@jdennes&lt;/a&gt; for help on getting these right, plus &lt;a href=&quot;https://twitter.com/hdv&quot;&gt;@hdv&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/BenjaminReid&quot;&gt;@BenjaminReid&lt;/a&gt; for proof reading ??.&lt;/p&gt;&lt;p&gt;Cheers, Dave&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Add a Formspree form to Your static sites</title>
    <link>https://darn.es/add-a-formspree-form-to-your-static-sites/
    <updated>2020-03-08T19:35:57.000+00:00</updated>
    <id>https://darn.es/add-a-formspree-form-to-your-static-sites/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://webdesign.tutsplus.com/tutorials/quick-tip-add-a-formspree-form-to-your-static-sites--cms-23870">Add a Formspree form to Your static sites</a></p>
        <pre>https://webdesign.tutsplus.com/tutorials/quick-tip-add-a-formspree-form-to-your-static-sites--cms-23870</pre>

    </content>
  </entry>
  <entry>
    <title>I listen to too many podcasts</title>
    <link>https://darn.es/too-many-podcasts/
    <updated>2020-03-08T19:35:37.000+00:00</updated>
    <id>https://darn.es/too-many-podcasts/</id>
    <content type="html">

        &lt;p&gt;I’ve had to take a break from listening to podcasts as all I’ve been doing in playing catch up with every single episode of them, rather than listening to episodes I actually want to hear.&lt;/p&gt;&lt;h2 id=&quot;the-list&quot;&gt;The list&lt;/h2&gt;&lt;p&gt;Here’s a list of everything I am subscribed to on my podcasts app:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;https://gimletmedia.com/show/reply-all/&quot;&gt;Reply All&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://shoptalkshow.com/&quot;&gt;ShopTalk&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://gimletmedia.com/show/startup/&quot;&gt;StartUp Podcast&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://99percentinvisible.org/&quot;&gt;99% Invisible&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.designdetails.fm/&quot;&gt;Design Details&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.developertea.com/&quot;&gt;Developer Tea&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://onedesign.guide/&quot;&gt;One Design Podcast&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.pagebreakpodcast.com/&quot;&gt;PageBreak Podcast&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://www.narwhals.cool/&quot;&gt;Narwhals&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;https://blog.codepen.io/radio/&quot;&gt;CodePen Radio&lt;/a&gt;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;That’s a lot, especially how most of them are on a weekly cycle. I wish they were all more like the &lt;a href=&quot;https://onedesign.guide/&quot;&gt;One Design Podcast&lt;/a&gt; and only worked on a fortnightly basis, at least that way I could find a way to keep up.&lt;/p&gt;&lt;p&gt;&lt;em&gt;PS. That list is in order of preference, if you do want to listen to any then start from the top.&lt;/em&gt;&lt;/p&gt;&lt;h2 id=&quot;in-the-meantime&quot;&gt;In the meantime&lt;/h2&gt;&lt;p&gt;For the time being I’ve taken a break and kept to music until I can easily dip my toe back into them again. I realise this might be a bit hypocritical since I work on a podcast in my spare time as well. In this case I will say that if you don’t have time then don’t listen. I’d hate to think listening to a podcast is stopping someone from being truly productive.&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>How to implement cross-browser SVG Sprites</title>
    <link>https://darn.es/how-to-implement-cross-browser-svg-sprites/
    <updated>2020-03-08T19:35:17.000+00:00</updated>
    <id>https://darn.es/how-to-implement-cross-browser-svg-sprites/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://webdesign.tutsplus.com/tutorials/how-to-implement-cross-browser-svg-sprites--cms-22427">How to implement cross-browser SVG Sprites</a></p>
        <pre>https://webdesign.tutsplus.com/tutorials/how-to-implement-cross-browser-svg-sprites--cms-22427</pre>

    </content>
  </entry>
  <entry>
    <title>5 ways to be a better front-end web developer</title>
    <link>https://darn.es/better-frontend-web-developer/
    <updated>2020-03-08T19:14:34.000+00:00</updated>
    <id>https://darn.es/better-frontend-web-developer/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://www.creativebloq.com/web-design/better-frontend-web-developer-81412739">5 ways to be a better front-end web developer</a></p>
        <pre>https://www.creativebloq.com/web-design/better-frontend-web-developer-81412739</pre>

    </content>
  </entry>
  <entry>
    <title>Anchor CMS – What is it?</title>
    <link>https://darn.es/anchor-cms-what-is-it/
    <updated>2020-03-08T19:21:49.000+00:00</updated>
    <id>https://darn.es/anchor-cms-what-is-it/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://www.everydaydesigner.net/development/anchor-cms">Anchor CMS – What is it?</a></p>
        <pre>https://www.everydaydesigner.net/development/anchor-cms</pre>

    </content>
  </entry>
  <entry>
    <title>Creating a theme for Anchor CMS</title>
    <link>https://darn.es/creating-a-theme-for-anchor-cms/
    <updated>2020-03-08T19:30:51.000+00:00</updated>
    <id>https://darn.es/creating-a-theme-for-anchor-cms/</id>
    <content type="html">

        <p>Follow the link to find out more about <a href="https://webdesign.tutsplus.com/articles/creating-a-theme-for-anchor-cms--webdesign-13037">Creating a theme for Anchor CMS</a></p>
        <pre>https://webdesign.tutsplus.com/articles/creating-a-theme-for-anchor-cms--webdesign-13037</pre>

    </content>
  </entry>
  <entry>
    <title>Web Dev Conference 2012: Look back</title>
    <link>https://darn.es/web-dev-conference-2012/
    <updated>2020-03-08T19:30:36.000+00:00</updated>
    <id>https://darn.es/web-dev-conference-2012/</id>
    <content type="html">

        &lt;p&gt;A week or so ago I attended &lt;a href=&quot;http://2012.webdevconf.com/&quot;&gt;WDC 2012&lt;/a&gt; (Web Development Conference 2012), which was my first web design &amp;amp; development conference. And yes, I did put design, and you’ll see why in the following. At the conference we were treated to a number of speakers. Without blabbing on too much, I’d like to explain who they are, what they do, and what I thought about them:&lt;/p&gt;&lt;h3 id=&quot;first-speaker-david-burton&quot;&gt;First speaker: &lt;a href=&quot;https://twitter.com/Phishtitz&quot;&gt;David Burton&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;David is Head of Innovation at &lt;a href=&quot;https://www.redweb.com/&quot;&gt;Redweb&lt;/a&gt;. He believes that everyone is creative, and broke down creative into 5 types. The 5 types, along with everything he talked about, can be found in his &lt;a href=&quot;http://www.slideshare.net/davidburton/creativity-innovation-our-responsibility-to-fck-about-14835820&quot;&gt;presentation slides&lt;/a&gt;. Along with creativity, David talked about producing great ideas through play. I very much enjoyed his talk, it was more conceptual to what I was expecting but thats far from a criticism. Being a designer this was right up my alley. Great start to the day. Here’s a link to &lt;a href=&quot;http://www.blurredfocus.co.uk/&quot;&gt;his personal website&lt;/a&gt;.&lt;/p&gt;&lt;h3 id=&quot;second-speaker-jack-franklin&quot;&gt;Second speaker: &lt;a href=&quot;https://twitter.com/Jack_Franklin&quot;&gt;Jack Franklin&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Jack is a young developer at &lt;a href=&quot;http://www.kainos.com/&quot;&gt;Kainos&lt;/a&gt;. Now I use &lt;a href=&quot;http://www.gitboxapp.com/&quot;&gt;GitBox&lt;/a&gt; for all my commits in &lt;a href=&quot;https://git-scm.com/&quot;&gt;git versioning&lt;/a&gt;, but Jack uses Terminal. In Jack’s talk he said it was better than using a GUI, not only that but I am aware most developers &lt;a href=&quot;https://try.github.com/levels/1/challenges/1&quot;&gt;use Terminal&lt;/a&gt;. Rather than being stubborn I put my “&lt;a href=&quot;http://knowyourmeme.com/memes/challenge-accepted&quot;&gt;Challenge Accepted&lt;/a&gt;” face on a eagerly took down notes. Jack also &lt;a href=&quot;https://speakerdeck.com/jackfranklin/better-javascripting-web-dev-conf-2012&quot;&gt;talked about Javascript &amp;amp; JQuery&lt;/a&gt; (yes I know its the same thing). One of my favourites from the day as it inspired me to try new things. Here’s &lt;a href=&quot;http://jackfranklin.co.uk/&quot;&gt;Jacks own site&lt;/a&gt; which links to a few of his projects.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Break: &lt;a href=&quot;https://www.youtube.com/watch?v=MYSmij0407A&quot;&gt;Costa Coffee&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;third-speaker-keir-moffatt&quot;&gt;Third speaker: &lt;a href=&quot;https://twitter.com/iamkeir&quot;&gt;Keir Moffatt&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Continuing the variety of angles Keir presented an talk about the similarities between World Wide Web &amp;amp; the Wild Wild West. Surprisingly there were quite a few! The villans attempting to contradict the law and the sheriffs that try to uphold it for example. He also spoke about his &lt;a href=&quot;https://www.dailymail.co.uk/news/article-1279068/Facebook-user-Keir-Moffatt-sets-page-mystery-girl-met-train.html&quot;&gt;first hand experience of this&lt;/a&gt; and his view on  the whole concept of &lt;a href=&quot;https://speakerdeck.com/iamkeir/the-wild-wild-web&quot;&gt;the Wild Wild Web&lt;/a&gt;. Keir came across as a natural on stage, easy to listen to and kept interest throughout. And then out of nowhere a gang of break dancing bandits stormed the stage and challenged him to a dance-off. Needless to say &lt;a href=&quot;https://youtu.be/YrCV3xKJF_w?t=58s&quot;&gt;he busted out his moves&lt;/a&gt; and sent them packing. Excellent all round talk. By the way, here’s &lt;a href=&quot;http://iamkeir.com/&quot;&gt;Keir’s blog&lt;/a&gt; where he posts about his thoughts and processes.&lt;/p&gt;&lt;h3 id=&quot;fourth-speaker-shane-tomlinson&quot;&gt;Fourth speaker: &lt;a href=&quot;https://twitter.com/shane_tomlinson&quot;&gt;Shane Tomlinson&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Shane works for Mozilla on the &lt;a href=&quot;https://login.persona.org/about&quot;&gt;Mozilla Persona&lt;/a&gt; project. He explained about the importance of identities and the protection of them. Despite this area of web development being completely foreign to me I did understand parts of it. Such as users picking connivence over security when it came to setting a password. His solution? Make it easier for users, simple things like allowing the user to use as many characters as they want or using punctuation. Small things like this can vastly improve security. Despite it being very technical I was still interested in &lt;a href=&quot;https://shanetomlinson.com/talk-who-are-you/&quot;&gt;Shane’s talk&lt;/a&gt;. Shane also has a &lt;a href=&quot;https://shanetomlinson.com/&quot;&gt;personal site&lt;/a&gt; that he regularly posts on.&lt;/p&gt;&lt;p&gt;&lt;em&gt;Lunch: &lt;a href=&quot;https://youtu.be/lDKCbXTlrP4?t=14s&quot;&gt;Subway&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;fifth-speaker-syd-lawrence&quot;&gt;Fifth speaker: &lt;a href=&quot;https://twitter.com/sydlawrence&quot;&gt;Syd Lawrence&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This guy was full of energy from the very beginning. He currently works (and founded) &lt;a href=&quot;http://wemakeawesomesh.it/&quot;&gt;We Make Awesome Sh.it&lt;/a&gt;, which does what it says on the tin. The work he does reminds me so much of when I was doing my Interactive Design degree at Lincoln, it really makes me wish I had more coding knowledge back then. Syd’s talk was simply “play with code, try something out and make something cool”, which is exactly what he does. For example &lt;a href=&quot;http://instac.at/&quot;&gt;Instac.at&lt;/a&gt;, which uses the Instagram API to pull out any picture tagged with ‘#cat’. This experiment has now been used for clients such as &lt;a href=&quot;http://www.professorgreen.co.uk/instagreen/&quot;&gt;Professor Green&lt;/a&gt; and &lt;a href=&quot;http://www.instacanneslions.com/&quot;&gt;Cannes Lions&lt;/a&gt;. Super inspiring, makes me want to go &amp;amp; make awesome shi…&lt;/p&gt;&lt;p&gt;&lt;em&gt;Break: Grabbed a drink and met &lt;a href=&quot;https://twitter.com/missrachilli&quot;&gt;Rachel Shillcock&lt;/a&gt;. Had a brief chat, pleasant to chat with and had an excellent Manchester accent.&lt;/em&gt;&lt;/p&gt;&lt;h3 id=&quot;sixth-speaker-andrew-spooner&quot;&gt;Sixth speaker: &lt;a href=&quot;https://twitter.com/andspo&quot;&gt;Andrew Spooner&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Andrew was positive and fun speaker, his jokes weren’t the best but I chuckled anyway. He talked about the research for Windows 8, such as the concept of hinting and natural sound within UX. To go with this he showed us some great &lt;a href=&quot;https://www.youtube.com/watch?v=SG0Ou07IDhQ&amp;amp;list=PLJp-9umi_Vq1ElkqzJFC-c1bahRaW3THv&amp;amp;feature=plpp_play_all&quot;&gt;videos that expanded his points&lt;/a&gt;, they featured interviews with experts such as &lt;a href=&quot;https://youtu.be/VfmZhTZsj40&quot;&gt;Gareth Jones&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://youtu.be/SG0Ou07IDhQ&quot;&gt;Erik Spiekermann&lt;/a&gt;. I was really enjoying Andrew’s talk, however about two thirds in Andrew suddenly started talking about APIs &amp;amp; Apps for Windows 8. It was all sounding like a sales pitch to me, and when his machine crashed it only made it worse. This was the fly in the ointment for me.&lt;/p&gt;&lt;h3 id=&quot;seventh-speaker-robbie-manson&quot;&gt;Seventh speaker: &lt;a href=&quot;https://twitter.com/rougebert&quot;&gt;Robbie Manson&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This may have been my favourite talk from the whole event. Robbie is a designer &amp;amp; front end developer at &lt;a href=&quot;http://www.freeagent.com/&quot;&gt;Freeagent&lt;/a&gt;. His talk focused on the relationship between the design and the person. He likes to incorporate films into his talks, in ours he spoke about a &lt;a href=&quot;https://www.youtube.com/watch?v=Ri2Khr4eP90&quot;&gt;scene from Jaws&lt;/a&gt;. I could tell that Robbie is not only passionate about design, but that he also the thinking behind it. This might be a trivial comment but, even his slides were designed beautifully. Someone in the crowd asked what fonts he used, “Glad you asked that, &lt;a href=&quot;https://www.google.com/webfonts/specimen/Abril+Fatface&quot;&gt;Abril Fatface&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://www.google.com/webfonts/specimen/Gentium+Book+Basic&quot;&gt;Gentium Book Basic&lt;/a&gt;” he replied. This is the guy I’d want to have a chat with over a pint. Check out &lt;a href=&quot;http://www.robbiemanson.com/&quot;&gt;his portfolio site&lt;/a&gt; if you have a moment.&lt;/p&gt;&lt;h3 id=&quot;conclusion-excellent&quot;&gt;Conclusion: &lt;a href=&quot;https://youtu.be/Yx8FanC70S4&quot;&gt;Excellent&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;This event was what I expected and more. All the speakers gave brilliant talks that opened my mind, not only in terms of development but also in design. They all came from such a wide range of backgrounds within the industry, and hearing from all those different angles was really a great deal of interest to me. I’ll take a lot from this conference. I’ve found new drive towards learning new languages, I’ve learnt that playing with ideas really can bare truly fruitful avenues, and that I’m not the only one that gets really passionate about their work. All I need to do now is to put this new found knowledge to good use!&lt;/p&gt;&lt;p&gt;WDC is held every year in the city of Bristol, and organised by &lt;a href=&quot;https://twitter.com/alexolder&quot;&gt;Alex Older&lt;/a&gt;. I’d like to thank him for putting the show together and allowing me, and all the other attendees, the opportunity to hear from professionals in the field of Web Design &amp;amp; Development.&lt;/p&gt;&lt;p&gt;Cheers, Dave&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Tracking time</title>
    <link>https://darn.es/tracking-time/
    <updated>2020-03-08T19:30:25.000+00:00</updated>
    <id>https://darn.es/tracking-time/</id>
    <content type="html">

        &lt;p&gt;Not long ago I asked my Twitter followers what they suggest for a single person to track their time with. I was worried it might open up a can of worms, but I got an excellent response. Here&#39;s what people suggested:&lt;/p&gt;&lt;ul&gt;&lt;li&gt;&lt;a href=&quot;http://www.freeagent.com/&quot;&gt;Freeagent&lt;/a&gt; suggested by &lt;a href=&quot;https://twitter.com/alanhornedotcom&quot;&gt;@alanhornedotcom&lt;/a&gt; – Excellent not only for single users but also agencies, currently using this at work. Very good and seems to cover everything, my only issue is there&#39;s no search in the contacts section&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.freshbooks.com/uk/&quot;&gt;Freshbooks&lt;/a&gt; suggested by &lt;a href=&quot;https://twitter.com/pealo86&quot;&gt;@pealo86&lt;/a&gt; – Looks very similar to &lt;a href=&quot;http://www.freeagent.com/&quot;&gt;Freeagent&lt;/a&gt;, which can only be a good thing. Matt is a full time freelancer and he highly recommends this, so it seems this works really well for a solo designer/developer&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.fuelcollective.com/eon&quot;&gt;Eon&lt;/a&gt; suggested by &lt;a href=&quot;https://twitter.com/benjaminreid&quot;&gt;@BenjaminReid&lt;/a&gt; – Very sexy looking application, much closer to what I was looking for. Like the simple labelling and receipt that comes out of the bottom. Also has integration plug-ins for &lt;a href=&quot;http://www.freeagent.com/&quot;&gt;Freeagent&lt;/a&gt;, &lt;a href=&quot;http://www.freshbooks.com/uk/&quot;&gt;Freshbooks&lt;/a&gt; and &lt;a href=&quot;https://basecamp.com/&quot;&gt;Basecamp&lt;/a&gt;&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://www.thrivesolo.com/&quot;&gt;Solo&lt;/a&gt; suggested by &lt;a href=&quot;https://twitter.com/culshaw&quot;&gt;@culshaw&lt;/a&gt; – Ian used &lt;a href=&quot;http://www.freshbooks.com/uk/&quot;&gt;Freshbooks&lt;/a&gt; before, he switched to &lt;a href=&quot;http://www.thrivesolo.com/&quot;&gt;Solo&lt;/a&gt; because of its slick design and lovely looking graphs. Additionally &lt;a href=&quot;http://www.thrivesolo.com/&quot;&gt;Solo&lt;/a&gt; is catered to solitary, or small team of, designers/developers&lt;/li&gt;&lt;li&gt;&lt;a href=&quot;http://timetrack.bloop.info/&quot;&gt;Time Track Pro&lt;/a&gt; suggested by &lt;a href=&quot;https://twitter.com/daviddarnes&quot;&gt;me&lt;/a&gt; – This is approaching it from a different angle. Time Track Pro watches what applications, files &amp;amp; pages you look at and displays the amount of time spent on them in a simple window. Despite a very basic UI, and some slightly iffy design decisions, it does the job. Its the thing to go to when you ask yourself &quot;what the hell have I been doing all morning!?&quot;&lt;/li&gt;&lt;/ul&gt;&lt;p&gt;&lt;a href=&quot;https://twitter.com/alanhornedotcom&quot;&gt;Alan&lt;/a&gt; also sent me a nice article from &lt;a href=&quot;http://freelanceswitch.com/&quot;&gt;Freelance Switch&lt;/a&gt; which listed &lt;a href=&quot;http://freelanceswitch.com/productivity/6-cool-tools-to-track-your-time/&quot;&gt;6 Cool Tools to Track Your Time&lt;/a&gt;. Really great info from everyone on Twitter but I fear I was looking for something I didn&#39;t really need. I already use &lt;a href=&quot;http://timetrack.bloop.info/&quot;&gt;Time Track Pro&lt;/a&gt; at work and its great to refer to when working on PSDs and web pages. So sorry to any of the guys if they feel like they were cheated by me, I will be looking back at this if I ever go freelance though!&lt;/p&gt;&lt;p&gt;Cheers, Dave&lt;/p&gt;

    </content>
  </entry>
  <entry>
    <title>Just get it done</title>
    <link>https://darn.es/just-get-it-done/
    <updated>2021-09-23T07:49:05.000+00:00</updated>
    <id>https://darn.es/just-get-it-done/</id>
    <content type="html">

        &lt;p&gt;We all suffer from it, &#39;&lt;a href=&quot;http://clientsfromhell.net/&quot;&gt;I&#39;m my own worst client&lt;/a&gt;&#39; we say. The scenario is that you&#39;ve set yourself the task of creating an app, plugin, blog, android or (in my case) personal portfolio website. And thats great, working on your own work is always fun. However it can be far too easy to get stuck in a rut.&lt;/p&gt;&lt;p&gt;It can happen at any point in the project, but most of the time its the final sprint to the finish that (I think) people decide to start walking very slowly. It happened to me on this very website. Every time someone asked &quot;Is it ready yet?&quot; my reply would start with something along the lines of &#39;&lt;a href=&quot;http://en.wikipedia.org/wiki/Procrastination&quot;&gt;Well I just need to…&lt;/a&gt;&#39; followed by some ridiculous detail that might not even need doing.&lt;/p&gt;&lt;p&gt;The problem is that we become too precious about our own work and forget about the main task at hand, getting it done! Don&#39;t get me wrong, I do enjoy perfecting my own work right down to the last &lt;a href=&quot;http://www.apple.com/macbook-pro/features/&quot;&gt;retina sized pixel&lt;/a&gt;, but at some point we will have to find out if it floats. What we have to remember is that things can be fixed, amended, reissued very easily these days.&lt;/p&gt;&lt;p&gt;Simply put, don&#39;t be scared! It&#39;ll be awesome, whatever it is. Just don&#39;t let the little things stop you from getting your work out there. If you did do every little thing that you thought of there would be nothing left to evolve with.&lt;/p&gt;&lt;p&gt;Credits: I&#39;d like to thank &lt;a href=&quot;http://createdbypete.com/&quot;&gt;Pete Rhoades&lt;/a&gt;, and his brother &lt;a href=&quot;http://robertrhoades.carbonmade.com/&quot;&gt;Rob&lt;/a&gt;, for bothering me about my new website. Now its been launched this is my chance to bother them about their own websites. Come one guys, &lt;a href=&quot;http://www.youtube.com/watch?v=l1YmS_VDvMY&quot;&gt;get on with it!&lt;/a&gt;&lt;/p&gt;&lt;p&gt;Cheers, Dave&lt;/p&gt;

    </content>
  </entry></feed>
